abstract	author	category	desc	level	title	weekday	start_dt	end_dt
Generators: The Final Frontier This tutorial explores advanced uses of generators and coroutines for customizing various aspects of program control-flow.   The tutorial will involve looking, in detail, at a series of interesting examples which include the following:   Defining new context managers (@contextmanager decorator)   Inlining callback functions (e.g., understanding tricks underlying features such as the inlineCallbacks decorator in Twisted).   Yieldable threads (side-stepping the GIL).   Implementing simple actors (communicating tasks).   Using generators to eliminate recursion (avoiding the interpreter recursion limit).   Although the main focus of the tutorial is on generators, attendees will gain a lot of insight into the inner workings and design of the above topics and how they related to advanced libraries and frameworks.	David Beazley	Python Core (language, stdlib, etc.)	Python generators have long been useful for solving all sorts of problems involving iteration and data flow.  However, one of their more powerful uses is in customizing various aspects of program control flow.   In this tutorial, we'll look at some more exotic uses of generators such as writing context managers, inlining callback functions, eliminating recursion, implementing actors, and more.	Experienced	Generators:  The Final Frontier	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
To be useful and trustworthy, specifications and tests need to exist as executable code, not just as documents for human reading.  That realization has begun to spread to the field of documentation as well.   Doctests were possibly the first prominent Python technology to blur the boundary between documentation and executable code.   In recent years, several other technologies have arisen, including  the doctest and autorun extensions, which insert code execution results into Sphinx documents Dexy, which generates rich documents in virtually any format from templates that combine documentation and code the IPython Notebook, which combines a full Python client with rich webpage display and Markdown-based documentation  I'll explain the problems solved by executable documentation, then introduce the audience briefly to each of these types of technologies and explain what kinds of documentation each is suitable for.	Catherine Devlin	Education	Code executes.  Docs just sit there looking pretty.  Now it's time to blur that boundary!  Tools like the IPython Notebook, Sphinx, dexy, and old-fashioned doctests blend code with docs, making package docs, educational materials, and system-level docs more engaging, relevant, and trustworthy.	Intermediate	See Docs Run.  Run, Docs, Run!	Sunday	2014-04-13 13:50:00	2014-04-13 14:20:00
This tutorial is a systematic introduction to descriptors and metaclasses. It covers all relevant information with a focus on practical applications for common tasks. It is a part of the advanced training I've been delivering over the last years in open and in-house courses as well as trainings at EuroPython, PyCon PL, PyCon DE and PyCon IE. The material has been continuously refined owing to the participant feedback.	Mike MÃ¼ller	Python Core (language, stdlib, etc.)	Descriptors and metaclasses are advanced Python features. While it is possible to write Python programs without active of knowledge of them, knowing how they work provides a deeper understanding about the language. Using examples, you will learn how they work and when to use as well as when better not to use them. Use cases provide working code that can serve as a base for own solutions.	Intermediate	Descriptors and Metaclasses - Understanding and Using Python's More Advanced Features	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
Since I started doing free-lance python web-applications work, I've been getting a lot of questions from friends about how I became a full-stack python web apps developer. Some of my friends are strong front-end engineers that want to do more API level programming, others are back-end/infrastructure engineers who to know more about human computer interaction, front-end, and feature building. This talk will focus on how to build a full-stack web application and the python specific research that I have amassed over the past several years. My goal with the talk would be to give people a conceptual understanding of all the different parts of a web-application first. Giving them the big picture will help them to organize the more specific technical information that I give them as I go on.  I will then drill into the different major parts of the application and present them with the research I have collected about how they can set things up, what tools they can use, what the trade-offs are, etc. The major sections include production server configuration, local development environments, deploying, and integration with third party sites.  I will also touch on monitoring, exception handling and notification, and a few other things are not necessary for individual projects but important as you start to scale.  Next, I will talk about the application code layer and many of the python libraries and tools they can use to make it feasible for them to build a full-stack web application on their own. An example is django-supervisor, which is a pip installation that provides a very simple interface that allows engineers to use supervisor without messing with the conf files on the machine. I also plan to offer party favors in the form of starter code repositories and instructions. My goal is to make learning different parts of the python stack more accessible to people, giving them some toys to play with and a place to start. Ultimately, this can lead to more well-rounded engineers who understand how to go about researching and gaining proficiency in new parts of the stack on their own.	Kate Heddleston	Best Practices & Patterns	This is a talk about building full-stack python web applications where you manage every part of the application yourself. I will walk through how to setup a production server with your web application code, a local development environment using vagrant, and how to deploy from your local environment to production. I will also walk through python and Django libraries that will make your life easier.	Intermediate	So you want to be a full-stack developer? How to build a full-stack python web application.	Friday	2014-04-11 11:30:00	2014-04-11 12:00:00
There are a lot of things to think about when releasing code to the world, if you want others to be able to use it and contribute back. We'll cover:  The structure of an open-source Python project Choosing a license Documentation with Sphinx and ReadTheDocs Multi-version testing with Tox, coverage measurement with coverage.py, and continuous integration with TravisCI Writing a setup.py and releasing to PyPI Semantic versioning Helping people contribute to your project 	Carl Meyer	Best Practices & Patterns	Got some code that you've written that would be useful to others, but actually releasing it feels like too much new stuff to figure out? Releasing software does take some work, but this talk will take you step-by-step through the process with specific recommendations and tools. We'll cover preparing your code for release, packaging it, releasing it, and maintaining it over time.	Novice	Set your code free: releasing and maintaining an open-source Python project	Sunday	2014-04-13 14:30:00	2014-04-13 15:00:00
Want to get started with Django beyond the polls app? Based on the first few episodes of Getting Stared With Django, this tutorial will cover handy patterns for starting Django projects and apps. Taking off We'll cover quick improvements to settings, common apps to help you get your apps off the ground faster, and other patterns that make wrangling Django easier. We'll also cover patterns for how to, and where to, separate out apps and functionality to make re-use easier later on. Airborne During all of this, we'll take a simple app from startproject to deployment on Heroku (conference network permitting). This tutorial isn't for absolute Django beginners, but so long as you've done the Polls tutorial, you shouldn't be in over your head. It'll be fast-paced, hand-on, and thorough, so bring your computer and your typing fingers!	Kenneth Love	Web Frameworks	Getting Started With Django is a well-established series of videos teaching best practices and common approaches for building web apps to people new to Django. This tutorial combines the first few lessons into a single lesson. Attendees will follow along as I start and build an entire simple web app and, network permitting, deploy it to Heroku.	Novice	Getting Started with Django, a crash course	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
I will walk through the practicalities of building a simple video game from scratch, starting with presenting one approach to structuring the game code to keep it sane. I will talk about what libraries are available and then focus on the facilities present in the library used in the tutorial. I will then walk through the development of a simple game during which the attendees will code the game. Once the game is developed I will talk about potential further development that possibilities and use the remaining tutorial time to encourage and assist attendees in their efforts to do so. The game developed will cover the key game-writing skills of controlling what appears on the screen (including tile mapping and animation), loading resources, handling user input and simulating the environment within the game. There will be demonstrations and discussion of the various tools that may be used to create game assets (tile maps, sprites and sound effects.) The tutorial will also cover packaging the game for distribution both via PyPI and as a stand-alone executable.	Richard Jones	Gaming	This tutorial will walk the attendees through development of a simple game using PyGame with time left over for some experimentation and exploration of different types of games.	Novice	Introduction to game programming	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
Are you interested in doing analysis using Python but don't know where to start? Then this tutorial is for you!  You've probably heard about how great Pandas and iPython are for doing data analysis. However, you probably aren't sure where to get started. That was the exact same place I was when I first heard about how to do data analysis in Python.  It was even more challenging having only a single undergraduate class (5 years ago) in programming and only self-taught coding experience elsewhere. In this tutorial, I aim to guide the class through the process of doing data analysis, from problem formulation to coding to deriving conclusions. I will be emphasizing one underrepresented yet crucial step that typically does not get discussed in most workshops, that is the step of translating the problem into a series of computable steps using data structures that are amenable to analysis.	Eric Ma	Science	Are you interested in doing analysis but don't know where to start? This tutorial is for you. Python packages & tools (IPython, scikit-learn, NetworkX) are powerful for performing data analysis. However, little is said about formulating the questions and tying these tools together to provide a holistic view of the data. This tutorial will provide you with an introduction on how this can be done.	Novice	How to formulate a (science) problem and analyze it using Python code	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
See the outline.	Ned Batchelder	Testing	If you've never written tests before, you probably know you *should*, but view the whole process as a bureaucratic paperwork nightmare to check off on your ready-to-ship checklist.  This is the wrong way to approach testing.  Tests are a solution to a problem that is important to you: does my code work?  I'll show how Python tests are written, and why.	Novice	Getting Started Testing	Saturday	2014-04-12 13:40:00	2014-04-12 14:25:00
Machine learning can be an intimidating topic. Rather than intimidate, this should exhilarate; sure this stuff is science, but it's science you can do on your laptop. We'll discuss how machine learning is actually an accessible topic. There is an interesting set of tools you can play with; there might still be some rocket science involved, but we can treat a fair amount of the truly fancy math as a black box. We'll explore gathering a training set, turning blobs of text into usable data, training models, and the magic that is scikit-learn. We'll use this amazing amount of processing power, data, and science to separate Hacker News articles into buckets of stuff I want to read and stuff I want to pretend doesn't exist. Attendees should learn enough to start experimenting with machine learning themselves.	Ned Jackson Lovely	Science	"It's inevitable that online communities will change, and that we'll remember the community with a fondness that likely doesn't accurately reflect the former reality. We'll explore how we can take a set of articles from an online community and winnow out the stuff we feel is unworthy. We'll explore some of the machine learning tools that are just a ""pip install"" away, such as scikit-learn and nltk."	Intermediate	Enough Machine Learning to Make Hacker News Readable Again	Friday	2014-04-11 13:55:00	2014-04-11 14:25:00
The Python Web ecosystem has always placed a strong emphasis on testing, partly thanks to a wide range of testing tools available in Python Web frameworks. Some of the most used from those tools are dummy web clients, which allow to emit mock HTTP requests directly to your codebase and to inspect the responses' contents. However, as useful as they are, these dummy clients are limited as they do not exercise the full HTTP specification and they cannot effectively reproduce actual user interactions. With the recent advent of browser automators such as Selenium, it is now possible to use sophisticated HTTP clients to execute your tests in a more comprehensive way. Indeed, this allows you to write functional tests to ensure that all layers of your web application properly fit together and that user interactions function well from end to end. Python Web developers are already becoming increasingly familiar with Selenium et al., therefore this talk will go far beyond just an introduction to those technologies. Thus, I will present advanced techniques for testing CSS, visuals and responsive designs â all using Python. I will also offer advice on how to harness functional tests within real project workflows, in particular in a continuous integration environments. Lastly, functional tests are often criticized for being too slow and too brittle. Therefore I will present various practical tips for making functional tests faster and more robust.	Julien Phalip	Testing	This talk will present multiple advanced techniques for Web functional testing. You will learn how to test a wide range of Web front-end components, such as CSS, visuals, responsive designs and user interactions â all using Python. Various practical tips will also be presented to harness your functional tests in real project workflows.	Intermediate	Advanced techniques for Web functional testing	Saturday	2014-04-12 16:30:00	2014-04-12 17:00:00
Working with a team and delivering projects leads to structure, requirements and processes. Both back and front end development have their own set of effective tools and processes and they need to coexists in a way collaboration and deployment could be easily done. By mixing those tools and processes you can empower your team skills and make the most out of them without sacrificing robustness and predictability. Buildout is great at building application environment and replicate anytime. By using Buildout you can easily assemble, through simple configuration, all the parts needed for your project and make sure everything is coherent. Bower, as a Web package manager, will make your front-end package management a breeze while Grunt, with an increasing plugin library, will take care of all your assets and repetitive tasks. With Ansible you'll find it easy to deploy your application with the same tools and processes by avoiding to write scripts or custom code. Great benefits you'll get by using adapted tools for specific tasks, automated and mixed in a coherent way to leverage both your front and back end development and team players.	Blaise Laflamme	Best Practices & Patterns	How to make our Python web development workflow less painful and more predictable? By mixing a collection of tools and best practices for both back and front ends like Buildout, Grunt, Bower and Ansible to automate tasks.	Novice	Upgrade your Web Development Toolchain	Saturday	2014-04-12 12:10:00	2014-04-12 12:40:00
As the layer below the popular SQLAlchemy ORM, the Core portion of SQLAlchemy is often overlooked; however, it can be extremely handy when the data can not be modeled prior to access, needs to be dynamically created, or there is no other value to having a class model. Basic Usages We'll first explore the basics of setting up SQLAlchemy in your project, and how to create tables on the fly.  Once the tables are created, we'll move into performing all the common sql operations including querying with filters, groups, and joins.  SQLAlchemy Core also exposes many SQL functions such as counts, sum, and time related statements. Speaking the Database Language SQLAlchemy uses dialects to know how to speak to specific types of databases.  Many of the common database engines are supported such as PostgreSQL, MySQL, Oracle and MSSQL.  Sometimes, you need need to build a custom dialect to accomidate an unusual function.  A recent example is Amazon Redshift, which sort of speaks postgres. We'll look at an example of the custom unload statement built for SQLAlchemy. Dynamic Table Introspect and Query Building Finally, we'll cover how to introspect an existing table to build a pythonic representation we can use for SQLAlchemy Core operations.  Since some datatypes can be unknown depending on the table structure, we'll discuss how to accommodate that.  We'll wrap up with a brief look at query chaining and the use of conditional to build dynamic queries, which builds directly on top of the simple sql operations we covered earlier.	Jason Myers	Python Libraries	This talk provides a broad-based introduction to SQLAlchemy Core library. It is focused on someone new to SQLAlchemy Core, who has experience with other database technologies such as Django or SQLAlchemy ORM. We'll cover the differences between the domain-centric models of those tools compared to the schema-centric model and how we can use that to deal with common and unusual data sources.	Novice	Introduction to SQLAlchemy Core	Saturday	2014-04-12 13:55:00	2014-04-12 14:25:00
Taba is a distributed aggregation service, currently handling over 6M events per second, with low end-to-end latency. Similar in concept to statsd, Taba can handle orders of magnitude more data, with stronger consistency guarantees. It is built atop Redis using Python with gevent and Cython. We will discuss the data model used, and how its design impacts process flows, the database schema, network usage, cacheability, etc. We will also describe the cluster architecture, which is based on many identical distributed processes, and uses master-less coordination to automatically distribute load across the cluster. Finally, we will discuss some of the interesting challenges and solutions encountered. These include:  Memory fragmentation and âratchetingâ in CPython Using generators, greenlets, and queues to great effect in reducing memory usage without sacrificing performance. Using Cython to optimize critical sections Optimizing CPU intensive operations (e.g. distributed reservoir sampling) Hybrid manual / automatic memory management techniques 	Kevin Ballard	Best Practices & Patterns	Taba is a distributed metrics aggregator, similar in concept to statsd. Built with Python using Redis, gevent, and Cython, it currently handles over 6M events/sec with strong consistency guarantees. This talk will present an overview of its design, and discuss the challenges and solutions encountered in the process of building a high throughput, low latency distributed service.	Intermediate	Pushing Python: Building a High Throughput, Low Latency System	Saturday	2014-04-12 15:15:00	2014-04-12 15:45:00
It's been ten years in the making, but Django finally has built-in migrations. Inspired by South, django-evolution, Alembic, Rails and more, they're a brand new design with some unique design decisions and some exciting possibilities. Learn the key design decisions we made, ideas we discarded, and the unique treatment we have to give each of our four official database backends, as well as the challenges we faced in creating a new migration file format, how to do dependency resolution efficiently, and how we managed to make such a large change in a backwards-compatible way.	Andrew Godwin	Web Frameworks	Django finally has built-in migrations, and they're a long way from the designs of South or django-evolution. Learn the key design decisions we made, ideas we discarded, and the unique treatment we have to give each of our four official database backends.	Intermediate	Designing Django's Migrations	Saturday	2014-04-12 11:30:00	2014-04-12 12:00:00
Mobile platforms are becoming very important area of IT industry and part of our live, and sure if you are Python fun you'll be interested in how can you develop some cool stuff for such platforms using your favorite language. What if you want to write simple game(or even not simple) with Python or write some application with rich graphic and even 3D elements for Android/iOS? You can do it! In my talk I'll speak about tools which may help you develop cross-platform applications with using OpenGL ES(OpenGL subset for embedded systems).  Mostly my talk is about Kivy project as it's good implementation of cross-platform framework. But it's not about Kivy as a framework for creation applications with UI, it's about Kivy's way for drawing all graphical elements which is based on the using OpenGL ES and its API you may use to develop fast graphical application. Through this API it's possible to call raw OpenGL functions, to use shaders and create fantastic graphical things if you are experienced with OpenGL. As an alternative in my talk I'll say about using some other projects like Ignifuga, another Python based framework for cross-platform game development and Panda3D, which also may be used for developing 3D applications with Python for mobile platforms. And sure if you want to make full-featured game with using some complex graphical logic, I'll say how can you optimize it with using Cython and how can you port your extensions to different platforms. During this talk some simple graphical application will be demonstrated right on the mobile device. These demos includes examples of simple 2d graphical application with integrated physics, simple 2D puzzle game, demo with basic 3D figures, Rubik's cube game(see appropriate images below): Simple 2D primitives with physic simulation  Simple puzzle demo  Basic 3D figures demo  Rubik's cube game written on Python 	Niko Skrypnik	Gaming	Games, application with rich graphic for mobile platforms? Yes! You can do it for Android, iOS and other platforms with using Python. In this talk I speak about tools you may use for developing applications with using OpenGL ES for different platforms, the ways and concepts which are used in those tools, some tips and tricks you may use to make a cross-platform game with Python for fun and profit.	Intermediate	2D/3D graphics with Python on mobile platforms	Sunday	2014-04-13 13:50:00	2014-04-13 14:20:00
"Django is nearly nine years old, and is pretty big, both in terms of user base and in terms of code. But what makes it useful? What makes it a good choice for Web development? It's not the feature list or the number of components, it's a few very important core ideas. The first is Django's core request/response life cycle and abstractions, which offer a higher-level approach over raw WSGI (even though ultimately Django itself will speak WSGI to the Web server, and will translate between Django's own request/response classes and WSGI's more CGI-like programming model). This carries over from the base request and response objects into the actual implementation of request processing: Django views are simply Python callables which take a request and either return a response or raise an exception, allowing for easy exploratory programming with a minimum of interference from the abstractions. The second is a tendency to find balance between shipping only the minimal code necessary for Web programming (as in many lighter-weight frameorks) and trying to ship everything. Django's core component set has remained relatively constant throughout its history, and major new features and functionality are evaluated in a very conservative fashion, with the tendency in the past few years actually being toward ""un-bundling"" -- functionality which used to ship with Django itself is now in the process of being spun off into separately-distributed applications -- and providing sound default implemenations which can be easily replaced with third-party versions as needed (as in the case of the template system, and authentication framework, to take two examples). This allows Django to cover common cases while leaving room for the community to grow solutions and additional functionality on top of a solid core. Finally, the concept of the Django application, as an encapsulated unit of functionality, gives developers a major advantage in code reuse and being able to easily integrate disparate functionality to compose more complex Web sites or Web applications. Django's core components essentially function as a dependency that all application developers can assume, and Django's APIs provide a common ""language"" all applications can speak. This helps to minimize the amount of new code developers need to write, and acts as a powerful ""force multiplier"": even a lone developer has the resources of the entire Django community, and the large existing base of applications and functionality, to draw on when embarking on a new project. Taken together, these ideas make Django a powerful and useful addition to a Web developer's toolbox, and allow developers of multiple experience levels to quickly and efficiently build useful, modern Web applications."	James Bennett	Web Frameworks	Lots of talks and tutorials try to cover Django exhaustively, going over every component and feature. But not so many take a look at the bits that let Django be Django. In this talk, we'll see exactly what those bits -- some old, some new -- are, in a way that shows why it's still a solid and popular choice for web developers nearly nine years after its initial public release.	Intermediate	Django: The good parts	Saturday	2014-04-12 12:10:00	2014-04-12 12:55:00
Python has a complex past with cryptography. There are half a dozen major frameworks built on at least three separate C implementations, each with their own strengths and weaknesses and in various states of maintenance.  In our development of an open source key management system for OpenStack (Barbican), our team has spent some time investigating the major options including OpenSSL, libnss, nacl and pycrypto on the C side and PyOpenSSL, Pycrypto, python-nss and m2crypto on the Python side. In our research, we noted several challenges with the current crop of libraries including audit state, support for PyPy, maintenance status, etc. In response to this, a group of Python aficionados with more time than sense have begun development of Cryptography (https://github.com/pyca/cryptography). Cryptography is a modern Python crypto library capable of  utilizing multiple C backends based on CFFI, thus enabling PyPy use. We will cover the current state of the library, it's goals and design decisions.	Jarret Raim,Paul Kehrer	Python Libraries	There are a half-dozen major Python cryptography frameworks built on at least three separate C implementations, each with their own strengths and weaknesses and in various states of maintenance. This presentation will review the current state of the art and discuss the future of crypto in Python including a new library under development, PyPy support and more.	Intermediate	The State of Crypto in Python	Friday	2014-04-11 16:15:00	2014-04-11 17:00:00
Traditional Django programming tutorials focus on the command line and views/models first before templates. This is great for people with previous programming ability, but can be difficult for those who don't have back-end programming experience, such as web designers and front-end developers. This tutorial focuses on teaching Django by focusing on the templates, the admin, and basic dynamic data, with the goal of teaching the building blocks of Django programming and ignite a fire to learn more.	Tracy Osborn,David Wolever	Best Practices & Patterns	Traditional tutorials for Django usually assume some programming experience, but what if someone is learning Python and Django with a HTML/CSS background? This tutorial focuses on the web-based features of Django â templates and the admin â and goes over the basic building blocks of Django programming to get web designers excited and interested in learning more.	Novice	Django for Web Designers and Front End Developers	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
There is a lot of buzz about the âInternet of Things.â  While many people talk about the potential of connecting the physical world to the internet, very few of offer practical examples of how this can be done. This talk will showcase tools in the python ecosystem that will make the internet of things possible. Live and on stage we will code a simple internet of things web server. Weâll quickly touch on the python tools used in an internet of things web stack and connect the dots between each piece.  The talk will begin by looking at tools that enable interacting with the physical world via sensors and actuators. Weâll cover audio capture, video capture, digital and analog sensors, and actuators. The audience will then generate some data which we will analyze and make sense of using iPython, NumPy, SciPy, sci-kits learn, Pandas and Matplotlib. We will see how these tools can be used to make sense of the real world. Finally, we will connect our sensors, actuators, and analysis to the internet using Flask, RabbitMQ, Celery, and databases. This talk is intended to take all levels of python programmers through the steps necessary to create an internet of things web stack.	Katherine Scott	Python Libraries	Live and direct from the PyCon stage learn how to connect your things to the internet! In this talk weâll connect physical things and people to the internet.  In this talk we will live code a tiny web server that interacts with the physical world via sensors, actuators, video, and audio.  We will  explore tools in the Python ecosystem that make this possible and show how they work together.	Novice	Hello Physical World: A Crash Course on the Internet of Things	Friday	2014-04-11 17:10:00	2014-04-11 17:40:00
'How to Get Started with Machine Learning' provides an introduction to clarify what machine learning is, what it's not and how it fits into this picture of all the hot topics around data analytics and big data. This talk is targeted to those who are new and interested in exploring machine learning. It's especially focused on resolving some confusion with how machine learning fits into the space regarding data analytics and Big Data. The main take-aways are to understand at a high-level what machine learning is, key software engineering tools used in the space and the skills to build to work  on machine learning projects.	Melanie Warrick	Education	Provide an introduction to machine learning to clarify what it is, what it's not and how it fits into this picture of all the hot topics around data analytics and big data.	Novice	How to Get Started with Machine Learning	Friday	2014-04-11 14:35:00	2014-04-11 15:05:00
Following instructions of what entries to create where is easy enough when using a PaaS.  But DNS is hard â deployment issues always seem to come down to DNS.   A solid understanding of DNS will not only help with deploying your applications, but will also give a greater understanding of how the internet works, and more generally, distributed systems. In this talk, you will learn what DNS is, how it works and how to communicate with it, and how Python can make both interacting and spinning up your own DNS server simple (I swear!).	Lynn Root	Systems Administration	You've deployed! But your friends can't see it - what's wrong? I'm betting DNS.  Maybe you've fixed a couple of entries, point some records to hostnames, waited patiently for new domains to resolve only to notice your nameservers are incorrect.  But what actually goes on with DNS? Come to this talk to find out how DNS works, and how to interact and create a DNS with Python.	Intermediate	For Lack of a Better Name(server): DNS Explained.	Friday	2014-04-11 10:50:00	2014-04-11 11:20:00
"SaltStack is a breath of fresh air for Python developers that have struggled with Chef, Puppet, complex Fabric scripts, or manually setting up servers to run their software. Written in Python and configured using YAML and the Jinja2 template language, Python developers will feel right at home with Salt. It's not all roses, however. As with many configuration management tools, SaltStack has a steep learning curve. The two biggest issues newcomers seem to have are:  Learning the domain-specific terminology used by Salt (Pillars, Grains, States, etc.) Understanding how all those pieces fit together to make a functional system  This talk will provide a crash course on the basics of Salt. The goal is to take you from ""noob"" to competent and getting you over the initial learning hurdle where nothing seems to make sense. By the end of the talk, you should be able to dive in and start writing your own Salt states."	Peter Baumgartner	Systems Administration	"Salt is the new kid on the block in the configuration management space. Unlike the Ruby-based Chef and Puppet, Salt is written in Python, making it easy to debug and extend for Python developers.

This talk will introduce Salt as well as explore some of the things that make it unique."	Intermediate	Getting Started with SaltStack	Friday	2014-04-11 15:15:00	2014-04-11 15:45:00
Installing Python code is easy. Uninstalling it, keeping it up to date, or keeping it separate from other installed Python code, is where the difficulty lies. There are a number of tools to help you with these tasks, each of which have their place: buildout, virtualenv, pip, setup.py develop, Ubuntu/Debian packages, and distributing an operating system template for a virtual machine with (for example) Vagrant. This talk steps you through a few scenarios, choosing appropriate goals for each scenario, to come to recommendations you can use immediately. If you are any of the following, you'll enjoy the talk:   An end-user looking to install the latest Python module   A one-off module author, trying to make sure people can install your creation   A professional programmer looking to make your Python web app easier for new developers to work on, be they co-workers or open source contributors.   Failures and stories are the building blocks of experience; by attending this talk, you'll be able to learn from mine rather than repeating them. We'll discuss:   How to avoid wasting time recompiling lxml and Twisted every time you want to work on a new project.   How to make dependencies optional, so your designer can have an easy time styling your app, without first having to install a C compiler for MySQLdb, or a JDK for Solr.   How your app, like the OpenHatch Django app, can go from a 1 hour dev setup process into a 5 minute one (and how we test that).   How to identify and address conflicts between apt-get and pip.  	Asheesh Laroia	Best Practices & Patterns	This talk covers the practical use of Python packaging tools. You'll see how to keep your system clean as an end user excited about installing a Python module from the web, the purpose of setup.py, how virtualenv makes life easier (and sometimes harder), what Ubuntu/Debian tools can offer, and how to make a complex app easier for new contributors to run. It is heavy on stories and recommendations.	Intermediate	Python packaging simplified, for end users, app developers, and open source contributors	Saturday	2014-04-12 16:15:00	2014-04-12 17:00:00
"""The idea of Flask is to build a good foundation for all applications. Everything else is up to you or extensions.""  -- Armin Ronacher, creator of Flask No batteries included? Make your own. Flask purposely ships with almost nothing - it's a no-batteries-included toolkit at heart. Most functionality lies in the extension ecosystem, and if you want to share your own code, you'll need to learn how to create one. We'll talk about the architecture of Flask, and go over how you can extend it to add your own functionality.  A working example: Flask-FeatureFlags  When my team moved to continuous integration, we needed a way to deploy but hide incomplete features. I wrote a small library to add feature flagging to our application. Other teams were interested so I rewrote it as a general purpose extension and open sourced it.   It's only a hundred lines of code, but it's a good introduction to how you can extend Flask including signal hooks, decorators, and new Jinja functionality. It even works with Python 3. Where do you go from here? We'll end with a sampler of Flask extensions that push the envelope to give you an idea of where you can go after the basics."	Rachel Sanders	Web Frameworks	You can create a web application with Flask in seven lines of code, and you can grow that app to thousands. How do you create reusable, shareable libraries? We'll use a simple but real extension I created (Flask-FeatureFlags) to look at the different ways you can make Flask awesome.	Intermediate	Developing Flask Extensions	Saturday	2014-04-12 10:50:00	2014-04-12 11:20:00
Note: We know this talk has limited ties to Python, although in the technical material section we will make it very Python specific. However, the nature of on-boarding an employee will always be somewhat language and tool agnostic because it involves more people problems and dynamics than technical problems. Even so, we believe that technical on-boarding is extremely important topic for the python community (and all other technical communities). Abstract Intro With the increase of code academies training new engineers there is an increase in junior engineers on the market. A lot of companies are hesitant to hire too many young engineers who need training because they lack sufficient resources to get them up to speed. This is a talk about how to make junior engineers into independent and productive members of your engineering team faster and cheaper. We will focus on python specific resources and libraries that will help you create a simple but effective on boarding program, and talk about case studies of companies that have had success using these techniques. Understanding beginners vs. experts. This part is important because in any line of teaching, coaching, or mentoring its important to understand how to get a student/employee to the next level. That means both understanding the technical subjects they need to learn, but also understanding the soft skills they need to work on such as confidence, tenacity, or communication. Understanding these goals will help get engineers up to speed faster and cheaper. Onboarding Plan: The general theme of the onboarding plan is this: âYouâre not giving new engineers answers, youâre telling them where to go when they have questions.â The onboarding plan will cover 3 ways to help new engineers know where to go when they have questions and get up to speed faster: technical material, mentors, and team relationships.  Technical material. This can include reading material, documentation, and source code. In the python community, there are a lot of resources available to help give engineers a better understanding of how to use python and what the standards and best practices are. We will provide a catalog of the materials that already exist and how you can use these materials to help engineers answer questions they have without taking up the time of developers around them. Being able to navigate the wealth of information out there will additionally serve to help engineers feel more independent and confident in their own ability to solve problems. Mentors. While people in the technology community general believe mentorship is good, thereâs a lot of confusion about how to choose mentors for different engineers. There are a few guidelines when choosing mentors that will help with this process. The first guideline, the last person who learned something is the best person to teach it. I.e. the best person to help a new engineer set-up their development environment is the last engineer to join the company. Rather than having an engineer whoâs been at the company longer try and walk new engineers through these tasks, simply assign the person who most recently learned it since it will be freshest in their mind. Team relationships. Itâs important to integrate a new engineer into the team as quickly as possible from a social standpoint. Regardless of what the company culture is, making sure that new engineers feel comfortable with their team is critical to their confidence and ability to ask questions of different people. If a new engineer feels comfortable with more people on the team, then they will feel comfortable spreading questions around to different teammates. If they feel comfortable with only one person, then thereâs less of a chance that theyâll utilize the resources of the whole team. Environment. Making sure the environment encourages questions, experimentation, and failure is important. Itâs not enough to simply say that you believe in those things, the environment has to actively support that behavior at all times.  Case Studies of Companies: Hearsay Social - I did onboarding at Hearsay Social for several years while the company was small. At Hearsay we had limited resources for onboarding new engineers and most people didnât have time to take on a new person full-time. Additionally, if the new engineer was junior we needed to get them to a place where they were independent enough to work on their own as quickly as possible.  In order to get them integrated into the team as fast as possible, we had a social gathering within the first week of them joining so they could get to know their teammates and feel welcome. We would have the last engineer to join the team help the new engineer setup their development environment. This engineer also walked them through the catalog of technical resources and documentation they could reference whenever they had a question about a tool or a coding convention. New engineers were paired with a social peer mentor so they could ask questions about the team culture and other non-technical elements of the company. Finally, junior engineers would be paired with someone more experienced for their first big project. In addition to mentors, each engineer also had an engineering manager.  Eventbrite - Eventbrite has been onboarding junior engineers out of Hackbright Academy in the past year and has some new techniques theyâve learned to get engineers up to speed quickly.  You don't need to be an expert in order to help a new engineer out with something- having other relatively new engineers helping your new one get started takes load off the sr people and helps both teacher and student. Student feels like they're not SO behind, teacher learns the material they're covering even better. THis is particularly useful when setting up the dev environment; have the most recent addition to the team assist in dev env setup. Buddy system- unrelated to teaching, but bringing new eng on board culturally Code labs- a hour set aside for new eng to ask questions about code, and usually lead into topics like django's ORM An environment where it's OK to ask questions Short, medium, long term goals- explicit ones- i.e. tracing a web request in django (short term goal). 	Kate Heddleston,Nicole Zuckerman	Community	This is a talk about how to make junior and new engineers into independent and productive members of your engineering team faster and cheaper. We will focus on python specific resources and libraries that will help you create a simple but effective on boarding program, and talk about case studies of companies that have had success using these techniques.	Novice	Technical on-boarding, training, and mentoring.	Sunday	2014-04-13 13:10:00	2014-04-13 13:40:00
"Castle Anthrax Introduction You will learn what a ""Rogue-like"" is. We will dive into a few sample dungeons in search of the grail (to give you an idea of what various procedurally generated dungeons look like). Be brave, Sir Galahad! Data-Structures We'll start out with some terminology to frame our problem. Then we cover some basic data-structures that are commonly used when generating dungeons and discuss their trade-offs. Algorithms This is where the action happens. We will cover three broad topics in level design and dive right in: Maze Generation Good dungeons have twisting corridors and labyrinthine passages. You will learn depth-first-search and Prim's algorithm. We will discuss the differences in the results they produce and how that can affect the design of the level and gameplay. Feature Placement Mazes aren't really dungeons. A good dungeon has rooms, doors, and pits (and beacons!). We will look at a few examples of some interesting features from other games. And then we will dive into some techniques for generating your own. We'll cover Poisson Noise, cellular automata, and placement techniques such as binary space partitioning for adding unique features to your levels. Constraint Solving Not every dungeon produced by your program is going to be worth playing. Fortunately there are techniques we can employ to hint to the computer when it has produced a dud. This is an entire area of CS research but we will briefly discuss some quick hacks you can use to generate better levels. Sir Lancelot, to the Rescue! You may be tempted to write your level generator from scratch (and you should give it a try some time). However for those in need of rescuing there are libraries in Python to get you started and give you some quick results to experiment with. Conclusion and Q&A; Finally we will take a look at a demo of some of the techniques we've seen throughout the talk. And we can open up the floor to a discussion about using procedural techniques in game design, Python tricks and tips, and (hopefully) answer any questions you may have."	James King	Gaming	Come and learn the techniques used for generating random dungeon-like levels for games. You don't have to know what Rogue is to enjoy this talk. Prepare yourself for a plethora of Monty Python references and we'll have some fun.	Intermediate	Castle Anthrax: Dungeon Generation Techniques	Friday	2014-04-11 16:30:00	2014-04-11 17:00:00
Loosely coupled, distributed, even driven, asynchronous - all these are terms that you will hear when you want to build  an application that is scalable and handles large amounts of work load as if nothing happened, no sweat. There are many ways of building these, but when you talk about an application distributed across servers and talking to each other, the obvious mechanism is messaging - whether you send your own message or even using simple sockets like with Twisted or if you use a full blown broker like RabbitMQ. Even if you use something like Celery, you will have to choose a messaging backend which you want to use. And this choice is the problem - how to evaluate the various options? The choice is not governed by external factors, although things like licence, cost, support etc make an impact on your final decision. The choice is primarily driven by what your application is built to do, whether it wants to handle only the functionality part and wants the underlying messaging layer to provide guarantees about message delivery and caching, querying etc. This talk will distill my experience with seeing, building and designing such messaging applications and provide a methodology that you can use.	Narahari Allamraju	Best Practices & Patterns	The objective of this session is to give the audience an idea of how they should choose a messaging layer for their application - how to evaluate their requirements against the features of the tools and make a choice. I will use my experience with building messaging applications to present a methodology which they can use	Intermediate	Which messaging layer should you use if you want to build a loosely coupled distributed Python app?	Saturday	2014-04-12 17:10:00	2014-04-12 17:40:00
Since 2010, the GNOME Foundationâs Outreach Program for Women has provided 130 women with an opportunity to participate in Free Software internships. In the last year, it has expanded to 23 Free Software organizations, including the Linux Kernel, Mozilla, Wikimedia, OpenStack, MediaGoblin and the Twisted Project. Many of the participating organizations use Python. The diversity of the GNOME community has changed dramatically as a result of this effort. While women comprised only 5% of GNOME contributors attending the Desktop Summit 2009, women comprised 18% of attendees at GUADEC 2013. In a December 2012 survey of newcomers who joined and stayed involved in 12 Free Software organizations, 50% of GNOME respondents were women whereas only 6% of the respondents from other organizations were women, with no other organization having more than 15%. Moreover, GNOME had 22 female respondents, which was a greater number than the 20 female respondents from all of the other organizations combined. Organizations that joined the program within the last year are seeing similar interest in participation from women. The Wikimedia Foundation had 7 women participating in its Google Summer of Code 2013, run concurrently with the Outreach Program for Women, while they have only ever had one woman participate before. Upon joining the program, the Linux Kernel had 39 applicants, 11 of whom landed 148 patches during the application process, and 7 of whom were accepted for the program. This talk will cover the history of the program, what makes it successful, how the same strategies can be used for engaging all new contributors, and what other initiatives help increase diversity in Free Software. It will serve as a great introduction to the program for project leaders and established contributors interested in encouraging participation of women, as well as for women interested in expanding their involvement in Free Software by participating in an internship program.	Marina Zhurakhinskaya	Community	Since 2010, the GNOME Foundationâs Outreach Program for Women has provided 130 women with an opportunity to participate in remote internships with 23 Free Software organizations. This talk will cover the history of the program, what makes it successful, how the same strategies can be used for engaging all new contributors, and what other initiatives help increase diversity in Free Software.	Novice	Outreach Program for Women: Lessons in Collaboration	Sunday	2014-04-13 13:50:00	2014-04-13 14:20:00
An introductory hands-on workshop, aimed at the Amateur Data Scientists among us, to Data Science competitions. First we will quickly look at the classes of algorithms & their internals through simple competition problems & datasets. Next we will dig deeper into two Kaggle completions work through the datasets, choosing the right features, hands-on programming the appropriate algorithms & submitting a few entries. While a three hour tutorial cannot give full justice to all the Data Science Algorithms, the attendees will get a good idea of the top 5 algorithms and a chance to apply two or three of them on Kaggle competition data via guided hands-on programming.   We will look at competitions like the Facebook recruiting challenge, GE Flight optimization competition and StumbleUpon Classification Challenge.  Note :  1. Depending the state of the competitions during April, we might have to make changes on what competitions we will work on during the hands on portion. Kaggle has kept older competitions open for submission only. There might more interesting competitions during April timeframe.  2. While there is not enough time for the participants to work through the different datasets, we will provide links to a hands-on tutorial which you'all can do after the workshop.	Krishna Sankar	Best Practices & Patterns	Let us mix Python analytics tools, add a dash of Machine Learning Algorithmics & work on Data Science Analytics competitions hosted by Kaggle. This tutorial introduces the intersection of Data, Inference & Machine Learning, structured in a progressive mode, so that the attendees learn by hands-on wrangling with data for interesting inferences using scikit-learn (scipy, numpy) & pandas	Intermediate	Data Wrangling for Kaggle Data Science Competitions â An etude	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
"Curious about being involved in open source, but haven't had the time to make the plunge?  Involved with open source but a bit hazy on the way it all works? Open source legend Andrew Tridgell (rsync/samba) runs an annual week-long post-graduate level primer course (COMP8440), where he takes the time to share his exceptional wealth of open source experience and works to guide fresh-faced grads in to being members of the community. This talk will be conveying as much of this course as is possible in the time available, as seen through the eyes of a graduating student who was always keen about open source yet who hadn't made their first pull-requests until during this week, now, more than a year later, the presenter is actively involved in a bunch of cool open source projects. Exciting parts of the open source vault are opened, and some of the trusted favourites from history  will be discussed, such as:   ""what does 'open source' mean anyway? (microsoft have some open source these days, right?)"" ""what happens if someone steals and sells my open sourced code?"" and ""as if anything bad will happen if I write my own license""  The characteristics of the open source python community today will be looked at generally, with some guidelines for avoiding gotchas for existing projects. There will be specific step-by-step details about how to become involved and strategies for approaching all kinds of projects . The presenter will discuss the highs, the lows and unique sense of connection and achievement that can only be fulfilled by paying it forward to open source."	Elena Williams	Community	"Curious about being involved in open source, but haven't had the time to make the plunge?
Involved with open source but a bit hazy on the way it all works?
Open source legend Andrew Tridgell runs an annual week-long post-graduate primer course teaching ""Free and Open Source Software Development "". This talk will convey as much of this course as possible in the time available."	Novice	Hitchhikers Guide to Participating in Open Source	Sunday	2014-04-13 13:50:00	2014-04-13 14:20:00
Want to contribute to a Python project or the core language, but not sure where to start? Join us for 3 hours learning the nuts and bolts of open source contribution. By the end of this tutorial, you'll have the tools and practice to confidently contribute to your favorite projects. Give back to the community while making yourself a better software engineer. Beginning programmers are welcome and encouraged! We'll cover:  the structure of an open source project the many ways to contribute the life cycle of a bug key development tools communication in an open source project  During this tutorial, you'll get hands-on experience with:  issue trackers, to report and track bugs the diff and patch utilities, to share your source code changes a revision control system, to collaboratively manage changes to projects IRC, to get and give help while contributing in real time testing and building Python projects  We'll put these concepts and tools to practice by collaboratively reporting and fixing bugs in a demo Python project. We'll end with personalized next steps for getting started with open source projects that match your skills and interests.	Jessica McKellar	Community	"Want to contribute to a Python project or the core language, but not sure where to start?

Join us for 3 hours learning the nuts and bolts of open source contribution. By the end of this tutorial, you'll have the tools and practice to confidently contribute to your favorite projects.

Beginning programmers are welcome and encouraged!"	Novice	Contribute with me! Getting started with open source development	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
When it comes to passing text from one application to another,  developers will inevitably encounter (or create!) issues that are caused by the improper handling of character encoding. This talk will briefly cover the basic Unicode âfacts of lifeâ, describe the kinds of Unicode issues that commonly occur when dealing with data from multiple sources, and introduce a set of best practices and tools that can take the pain out of fixing many common Unicode encoding issues.  Our goal in giving this talk is to make developers recognize the importance of handling Unicode encoding correctly. Users should come away with a better understanding of how Unicode works in Python, a better appreciation for why it matters, and become aware of various strategies for dealing with cases where encoding issues break software.  Attendees will be able to differentiate between the kinds of Unicode problems their application design should deal with (or prevent) and those that, in the end, can only be solved by writing some Python or using a library.    We will walk through some real-world scenarios that caused us to bang our heads against the wall in frustration until we began to fully understand how Unicode works. We will cover how to avoid these problems and discovered some tools (including the python-ftfy library) which have solved some the unavoidable problems for us.	Travis Fischer,Esther Nam	Best Practices & Patterns	Every developer will inevitably feel the pain of character encoding issues. We will cover the fundamentals every Python developer should know on character encoding and Unicode. We will teach you how to identify the types of problems that occur when dealing with character encoding and outline a set of best practices and useful libraries which can be used to avoid and fix character encoding issues.	Intermediate	Character encoding and Unicode in Python: How to (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ» with dignity	Friday	2014-04-11 10:50:00	2014-04-11 11:20:00
Python, like any self-respecting high-level language, automatically deallocates memory programs no longer use. In CPython the primary mechanism for this is reference counting, which C code in the interpreter implements manually. However, reference counting must be supplemented with a real GC to deal with reference cycles. In contrast to CPython's hardcoded use of reference counting, PyPy has a flexible architecture that allows for pluggable GC implementations. Its current default GC is optimized for the creation of many small, short-lived objects, a typical allocation pattern in Python. Common to both CPython and PyPy is the problem of running finalizers of objects in cycles. PyPy and very recent CPython versions have sophisticated handling of this tricky case.	Benjamin Peterson	Python Internals	This talk will explore how garbage collection is implemented in CPython and PyPy. See how CPython deals reference counting's shortcomings with a special GC for cycle collection. Then dive into PyPy's sophisticated and high-performing GC implementations. The particularly thorny issue of finalizers in reference cycles will also be addressed.	Experienced	Garbage Collection in Python	Saturday	2014-04-12 11:30:00	2014-04-12 12:00:00
To many developers the database is a black box. You expect to be able to put data into your database, have it to stay there, and get it out when you query it... hopefully in a performant manner. When its not performant enough the two options are usually add some indexes or throw some hardware at it. We'll walk through a bit of a clearer guide of how you can understand how database is doing from a 30,000 foot perspective as well as analyze specific problematic queries and how to tune them. In particular we'll cover:  Postgres Caching Postgres Indexing Explain Plans Extensions Locking More 	Craig Kerstiens	Databases	To many developers the database is a black box. You expect to be able to put data into your database, have it to stay there, and get it out when you query it... hopefully in a performant manner. When its not performant enough the two options are usually add some indexes or throw some hardware at it. We'll walk through a bit of a clearer guide of how you can understand and manage DB performance.	Intermediate	Postgres Performance for Humans	Sunday	2014-04-13 13:10:00	2014-04-13 13:40:00
The Dilemma of Zero-Waste Operations All University of California campuses are required to reach an arduous zero-waste goal by the year 2020, necessarily limiting the materials destined for landfill burial to only 5% of the total waste stream.  At UC Santa Cruz, novel efforts are underway to reach this goal all the while addressing the bigger dilemma of operating a zero-waste campus; that is, to employ a robust resource recovery system which is based on a budget centered on refuse disposal, but now must deliver all components of the waste stream away from landfill deposit.  As refuse is removed from the resource stream, new methods for budgeting functions of the department are imperative in future Grounds Services operations.   In response to the shifting basis of operational execution, the Grounds Services department developed and installed a Smart Dumpster prototype to dramatically increase collection efficiency, study waste deposit patterns, and encourage overall refuse reductions.  At its essence, the Smart Dumpster is a typical dumpster that has an integrated depth sonar that is linked to a cloud computing application.  This sonar bounces real-time depth levels from the cloud to end-user applications by employing Python software.  In doing so, all activities surrounding the dumpsterâs use and evacuation are presented for real-time management, record analysis, and potential innovation. Importance of Python Programming Python was seen as integral to the Smart Dumpster concept due to its excellent programming function in regard to arrays.  This function allows multiple sonar sensors to be added to the same software program in a seamless and relatively simple manner.  Further, the sonar hardware required a Python application be installed on the senor itself to operate, interact with cloud services, and ultimately, to deliver sonar readings for end-user objectives.  This talk will outline the importance of Python for sonar operation and for creating a centralized file for managing the dumpsters on campus.  Executing a Smart Dumpster Prototype As the Smart Dumpster has been operating since July 13, 2013, the programming team has focused on end-user management capability based on the data collected and stored for review.  This talk will demonstrate the most recent iteration of the Smart Dumpster Dashboard, data analysis from the sonarâs readings, and review how operational roadblocks were overcome with Smart Dumpster design.  Even in the prototypeâs infancy, evidence-based proposals for innovation have emerged with the hopes to eventually roll-out the Smart Dumpster design for the entire UC Santa Cruz campus.  By the end of the presentation, attendees will appreciate the data infrastructure necessary to integrate input devices, Python programming, and a user-friendly interface software with the Smart Dumpster prototype as evidence of a successful pilot project.	Bradley  Angell	Testing	As U. of California campuses must reach Zero-Waste by 2020, a Smart Dumpster was designed to increase efficiency, study waste patterns, and improve refuse reduction. Using Python, a prototype has been installed into operations with tentative success since July 2013.  Demonstrating real-time data reporting, the talk will focus on the success, roadblocks and campus plans for the Smart Dumpster.	Intermediate	Smart Dumpster: Employing Python to Report Real-Time Resource Fill to Operation Managers	Sunday	2014-04-13 14:30:00	2014-04-13 15:00:00
"We'll discuss each kind of the most prevalent security flaws at the theoretical level, then using a specially-crafted, deliberately vulnerable Django app, individuals or pairs will carry out exploits against these flaws, and we'll illustrate solutions to mitigate each kind of attack. We'll be using the OWASP Top 10 as our topic roadmap, addressing issues such as:  Injection Attacks Broken Authentication & Session Management Cross-Site Scripting (XSS) Insecure Direct Object References Security Misconfiguration Sensitive Data Exposure Missing Function-Level Access Control Cross-Site Request Forgery (CSRF) Using Components with Known Vulnerabilities Unvalidated Redirects and Forwards  You'll want to set your brain to ""devious"" mode; you'll also need a laptop with Python 2.7 or 3.3 (or a buddy you can pair with). Having pip and virtualenv will be useful too, as will having Git installed to pull down the code we'll be working with. Attendees do not need prior security experience; this tutorial is aimed at intermediate web developers who are interested in gaining hands-on experience with simple forms of the most common attacks.  Attendees should have some experience with Python, Javascript, and SQL, and may benefit from at least a passing familiarity with Django (eg, previously attending a Django tutorial or working through the online tutorial)."	Mike Pirnat,David Stanek	Security	The Internet is a dangerous place, filled with evildoers out to attack your code for fun or profit, so it's not enough to just ship your awesome new web app--you have to take the security of your application, your users, and your data seriously. You'll get into the mindset of the bad guys as we discuss, exploit, and mitigate the most common web app security flaws in a controlled environment.	Intermediate	Shiny, Let's Be Bad Guys: Exploiting and Mitigating the Top 10 Web App Vulnerabilities	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
"Why is NoSQL the current hot scalability solution First I discuss why NoSQL is easier to scale than traditional relational databases. Then I describe how NoSQL-style compromises can be done in SQL databases, often with similar or better results because of tens of years of work in making the base data engine really fast and robust on single servers. How to do the same and more using PostgreSQL Finally I show you how to set up a python and PostgreSQL based system which is easy to scale, provides ACID guarantees where they are needed most and makes compromises for scalability and availability where the latter are deemed more important. The best thing is that this kind of scalability work for both OLTP and OLAP workloads, so the learning effort is good for both of these.  Sometimes you can even have just a single large ""database"" which can take almost any type of transaction processing and analytics load. (Though it still may be a good idea to have many instances/replicas of it for robustness) Also, if you'd rather not write any SQL, you can do all the OLTP stuff in a more pythonic way using an automagically generated ORM layer inside the database, near the data. If you are really masochistic, you can use the same ORM also for map-reduce type distributed data processing, though on more complex data queries the small effort of learning SQL usually pays off big by letting the database optimizer to select the best plan for ""map"" part of map-reduce. But as I said, everything runs inside the database, near the data and thus even the ORM & map-reduce analytics work fast. A few comparative benchmarks are provided for NoSQL style workloads on popular NoSQL databases and PostgreSQL"	Hannu Krosing	Databases	"This talk will outline and demonstrate usage of PostgreSQL for data storage and processing scenarios where new common wisdom would usually turn to ""NoSQL"" databases for scalability reasons. It demonstrates both NoSQL style usage and techniques using more traditional relational storage models with required adjustments for infinite scalability."	Intermediate	PostgreSQL is Web Scale (Really :) )	Sunday	2014-04-13 13:50:00	2014-04-13 14:20:00
What does it take to make a Python sandbox that can run untrusted code? Learn some surprising language features and experience the security challenges first-hand as we work through building a Python sandbox from scratch, finding new ways to escape it at each turn. You'll leave this talk with renewed appreciation for the dynamic nature of Python, some sneaky language tricks, and a solid grounding in the classes of security concerns sandboxed environments have to consider through concrete examples, building from the simplest cases up through quite sophisticated exploits. Throughout the talk we take inspiration from the excellent pysandbox and PyPy sandbox projects, as well as some devious historical Capture the Flag challenges involving breaking out of flawed sandboxes.	Jessica McKellar	Python Core (language, stdlib, etc.)	What does it take to make a Python sandbox that can run untrusted code? Learn some surprising language features and experience security challenges first-hand as we work through building a Python sandbox from scratch. You'll leave this talk with renewed appreciation for the dynamic nature of Python, some sneaky language tricks, and a solid background in classes of sandboxing security issues.	Intermediate	Building and breaking a Python sandbox	Friday	2014-04-11 17:10:00	2014-04-11 17:40:00
In this session, students will work together in a guided, collaborative workshop to learn how to write a client/server network program, and build upon that base to develop a more robust peer to peer chat implementation with remote procedure call mechanisms. This session is intended to teach the Twisted event loop model, the basics of writing a Twisted Protocol object, and the mental model of how to deal with asynchronous systems in Twisted. Students are expected to:  Be familiar with the Python language Be familiar with passing callables, closures, and other intermediate to advanced concepts Familiarity with writing web services a plus  Students are required to have a virtualenv environment configured, with Twisted v13 or higher installed through pip. Use of system packages will cause issues, and pip provides the most consistent packages for our needs.	Aurynn Shaw	Python Libraries	Let's Learn Twisted is a short 3-hour tutorial covering the basics of writing a Twisted Python client-server application using  Twisted Python's Factory and Endpoint APIs to construct a peer-to-peer chat and RPC network.	Intermediate	Let's Learn Twisted Python	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
"Even the most non-technical people use dozens of online services each day.  Each day, both the servers running those services and the clients used to access them are being targeted and compromised by attackers.  If your login and password haven't been part of a major breach yet, it's only a matter of time. Multi-factor authentication can defend against threats that can trivially defeat simple single-factor (""just a password"") authentication.  As a result, many popular online services, including Blizzard's Battle.Net, Google, Github, and Twitter have been incorporating multi-factor authentication in the last few years. This talk is a brief overview of multi-factor authentication, including what attacks it defends against is and what common options are available. This information should be useful to both those who have the opportunity to enable multi-factor authentication on services they use and providers of services who might be wondering whether they should provide multi-factor authentication. This talk will also cover a one-time-passwords, an important concept in one form of multi-factor authentication, as well as give some general guidelines on implementing two-factor auth in some common Python web frameworks."	Ying Li	Best Practices & Patterns	A brief overview of what multifactor authentication is, focusing particularly on possession factors, including what common options are available.   One-time-passwords, an important concept many possession factor types, will also be discussed.	Intermediate	Multi-factor Authentication - Possession Factors	Saturday	2014-04-12 15:15:00	2014-04-12 15:45:00
Over the last 15 years, Software Carpentry has evolved from a week-long training course at the US national laboratories into a worldwide volunteer effort to raise standards in scientific computing. This talk explains what we have learned along the way the challenges we now face, and our plans for the future.	Greg Wilson	Education	This talk will explain how Software Carpentry has grown to run over a hundred training events a year, what we've learned along the way, and how you can do it too.	Novice	Software Carpentry: Lessons Learned	Saturday	2014-04-12 16:15:00	2014-04-12 17:00:00
In many ways Python is very similar to other programming languages.  However, in a few subtle ways it is quite different, and many software developers new to Python, after their initial successes, hit a plateau and have difficulty getting past it.  Others don't hit or perceive a plateau, but still find some of Python's features a little mysterious or confusing.  This tutorial will help deconstruct some common incorrect assumptions about Python. If in your use of Python you sometimes feel like an outsider, like you're missing the inside jokes, like you have most of the puzzle pieces but they don't quite fit together yet, or like there are parts of Python you don't understand, this may be a good tutorial for you. After completing this tutorial you'll have a deeper understanding of many Python features.  Here are some of the topics we'll cover:   How objects are created and names are assigned to them   Ways to modify a namespace: assignment, import, function definition and call, and class definition and instantiation.  Much of the tutorial is structured around namespaces and ways to change them to help you understand most of the differences between variables in other languages and Python, including   why Python has neither pass-by-value nor pass-by-reference function call semantics,   and why parameters passed to a function can sometimes be changed by it and sometimes cannot.     Iterables, iterators, and the iterator protocol, including how to make class instances iterable   How to use generators to make your code easier to read and understand   Hacking classes after their definition, and creating classes without a class statement, as an exercise to better understand how they work   Bound versus unbound methods, how they're implemented, and interesting things you can do with bound methods   How and why you might want to create or use a partial function   Example use-cases of functions as first-class objects   Unpacking and packing arguments with * and ** on function call and definition  	Stuart Williams	Python Core (language, stdlib, etc.)	This tutorial is for developers who've been using Python for a while and would consider themselves at an intermediate level, but are looking for a deeper understanding of the language.  It focuses on how Python differs from other languages in subtle but important ways that are often confusing, and it demystifies a number of language features that are sometimes misunderstood.	Intermediate	Python Epiphanies	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
"Abstract Back in 2004, when I founded ""Durgapur Linux Users Group"", I chose a motto in Bengali, ""Learn yourself and teach others"". We are following the same rules today and one major program which helped to keep it going is the summer training. Just before summer 2008, with help from Shakthi Kannan (well known FOSS developer and mentor from India), we sent a mail to the various lists announcing an online summer training over IRC. The same training is now going on for the sixth year. Every year we see an increase of interest in the students and we started getting students from other countries too. The duration the training is around 3 months on #dgplug channel in irc.freenode.net  This presentation was the primary announcement this year, opensource.com also covered the story. In 2013 around 20+ students are working on various projects (upstream and ideas from scratch), half of the students are girls and we had a very good diversity in last years too.  Among the students this year, we have engineering college students, new hires in different IT companies, primary school English language teacher, a musician who loves to play his piano, system administrators from far corners of world."	Kushal Das	Community	Dgplug summer training is a free online IRC based course which aims to teach FOSS ideas and programming in general using Python to new programmers/stduents. In this talk we share our experiences, lesson learned, hoping that people will be able to replicate this in other parts of the world.	Novice	Teaching Python: To Infinity and Beyond	Friday	2014-04-11 15:15:00	2014-04-11 15:45:00
This talk deals with how Twisted can be combined with pretty much anything else. A common criticism of Twisted is that it wants to take over your entire ecosystem. The point of this talk is to demonstrate that that's a misconception. Specifically, the talk will demonstrate how:  Twisted can be added to many stacks with little or no change, e.g. as your WSGI server Twisted can be added to existing blocking code easily Blocking code, new or old, can be added to Twisted code Twisted plays well with other asynchronous IO frameworks:   specifically, I will talk about combining it with gevent 	Laurens Van Houtven	Python Libraries	A talk about mixing Twisted, an asynchronous IO framework for Python, with other Python code: blocking code, other asynchronous code...	Intermediate	Twisted Mixing	Friday	2014-04-11 14:35:00	2014-04-11 15:05:00
PostgreSQL has a reputation as being complex and hard to manage. It is certainly a powerful, capable database able to handle situations from a developer's laptop up to petabyte-sized installations. But that does not mean that only a special priesthood can operate it; any talented developer is capable of keeping a PostgreSQL installation healthy and happy. We'll go through the tasks that encompass 90% of what you'll have to do with PostgreSQL, from installation, through basic server tuning, routine backups and maintenance tasks, basic disaster recovery, though query analysis and tuning, and tips and tricks to get maximum performance out of PostgreSQL. A special focus will be on Python-based ORMs and their proper usage, such as Django and SQL Alchemy. We'll cover special situations, such as hosting on AWS, embedded/appliance environments, and the things you should never, ever do.	Christophe Pettus	Databases	"PostgreSQL has become the default database for most green-field development projects, and is the data storage architecture behind many major Python-based success stories, such as Instagram.

Despite a reputation as being complex and fiddly, Postgres is easy to install, administer, maintain, and use... with just a little bit of orientation.

This is that orientation."	Intermediate	PostgreSQL Proficiency for Python People	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
You may have used the pickle standard library module. But do you know how it works? This talk will introduce you to how pickle is implemented, and what some of the major problems with its approach are. Well deconstruct and rebuild the pickle library from the ground up, to understand why it has serious repercussions for your application's security and maintainability, Finally we'll look at some alternate approaches to serialization.	Alex Gaynor	Python Core (language, stdlib, etc.)	You may have encountered the pickle or cPickle libraries, and used them to persist some state about your program. But how do they work? This talk explores how the pickle protocol works, what its advantages are, and its disadvantages	Intermediate	Pickles are for Delis, not Software	Friday	2014-04-11 12:10:00	2014-04-11 12:55:00
In contrast to ORM tutorials which might begin with applied object-relational examples, this tutorial takes the opposite approach of building up from underlying and core components first, moving first through relational database concepts into the Python DBAPI, then describing the SQLAlchemy Core, the SQL Expression Language, and finally the ORM. In terms of learning SQLAlchemy, this is the harder road to travel, and at the end the ORM component itself will only have been roughly introduced. However, the goal is so that new users would leave with a solid grasp on what exactly SQLAlchemy is doing and how it's doing it, so that their future endeavors in continuing to learn about ORMs, SQLAlchemy or not, is informed by a rough understanding of the underlying fundmantals of interacting with a database.	mike bayer	Databases	"The goal of the tutorial is a broad-based introduction to SQLAlchemy, spanning the Core and ORM components as well as the systems that underlie them. The tutorial takes the ""harder"" approach teaching from fundamentals first, emphasizing details on how the library interacts with the database and SQL and concluding with an introduction to the ORM, providing a solid perspective for continued study."	Intermediate	Introduction to SQLAlchemy	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
This tutorial will aim to teach python developers the first steps of scraping the web. It will talk about three major scraping libraries and give interactive (read: we're writing code!) demonstrations of each of the libraries. Students will leave the tutorial with lots of bits of working scrapers for a few different types of sites as well as some form submission knowledge. There will also be some portions of going over best practices in terms of approaching web scraping as well as a word of caution regarding the legality of such practices. It will additionally talk about scraping data from other types of files like APIs, CSVs, XML responses and the like.	Katharine Jarmul	Python Libraries	Want to learn how to scrape the web (and / or organized data sets and APIs) for content? This tutorial will give you the building blocks (and code) to begin your own scraping adventures. We will review basic data scraping, API usage, form submission as well as how to scrape pesky bits like Javascript-usage for DOM manipulation.	Intermediate	Introduction to Web (and data!) Scraping with Python	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
This presentation will give a brief overview of machine learning, the k-nearest neighbor algorithm and Scikit.  Sometimes developers need to make decisions, even when they don't have all of the required information.  Machine learning  attempts to solve this problem by using known data (a training data sample) to make predictions about the unknown.   For example, usually a user doesn't tell Amazon explicitly what type of book they want to read, but based on the user's history, and the user's demographic, Amazon is able to induce what the user might like to read.   Scikit makes use of the k-nearest neighbor algorithm and allows developers to make predictions.  Using training data one could make inferences such as what type of food, tv show, or music the user prefers. We will use machine learning, Scikit, and the k-nearest neighbor algorithm to guess which type of music a Python programmer likes to listen to. http://scikit-learn.org/stable/modules/neighbors.html	Portia Burton	Science	One of the great features of Python is its machine learning capabilities. Scikit is a rich Python package which allows developers to create predictive apps.  In this presentation, we will guess what type of music do Python programmers like to listen to, using Scikit and the k-nearest neighbor algorithm.	Intermediate	Know Thy Neighbor: Scikit and the K-Nearest Neighbor Algorithm	Saturday	2014-04-12 11:30:00	2014-04-12 12:00:00
"In this talk we'll explore different options for interacting with non-Python code from Python, starting with invoking an external process using the subprocess module and ending with integrating external C libraries. We'll discuss tradeoffs encountered when building systems along the way.  ""subprocess"" behind the scenes  There's a whole lot going on when you invoke another process with the functions available from the subprocess module. The Python API is simple, but it turns out that there's a whole lot going on underneath the hood when you call out to another process, and a lot of these details are important to debugging and addressing performance issues. We'll deep dive down into what's going on here and learn about the interface between userspace applications and the Linux kernel.  wrapping C library code  With C libraries, we have the option of more tightly integrating with a Python program, which offers us more performance and control than shelling out. We'll learn what a Foreign Function Interface is, and take a look at the different options for integrating C libraries, including ctypes, Cython, and cffi. We'll discuss the pros and cons of these options and make some recommendations for which to use when. You'll leave this talk with a better understanding of how Unix processes work, knowledge of the options available for integrating C with Python, and perhaps some inspiration on how to use the tools available to you to gain an understanding of a system when you just don't know what's going on. A reading knowledge of C will be useful but not required."	Christine Spang	Python Core (language, stdlib, etc.)	Sometimes, the code you need just isn't available in Python, but someone's written some code in another language that solves your problem. What options do you have for interacting with this external code from within your program? We'll examine how to call external binaries, what happens behind the scenes at a systems level, and how these implementation details affect performance and memory usage. In the second part of the talk, we'll discuss the different options for more tightly integrating external code in the form of a C library for better performance and control.	Intermediate	Subprocess to FFI: Memory, Performance, and Why You Shouldn't Shell Out	Saturday	2014-04-12 12:10:00	2014-04-12 12:55:00
I work for a small company that specializes in analytics. Our business is data and the availability of that data is crucial. We were running into problems where all of our servers were not being fully utilized, while others were overloaded. I realized that distributed computing via Celery could be an answer to a number of problems. Over the past year we have integrated Celery into a number of our systems and use it for nearly everything except for presenting the analytics to the customer. The intention of this talk is to provide a how-to guide for using Celery across a number of systems, from long-running tasks to IO-intensive applications. The process of getting our systems stable and running consistently has been a learning process and so it is my hope that this talk will help other developers avoid the mistakes I made in the process.	Lewis Franklin	Best Practices & Patterns	Distributed computing is challenging. The network can be spotty. The servers can be pushed too hard. Race conditions can show up. Tasks can seem to disappear. Deployment can be messy. Celery is an excellent tool for writing distributed applications and this talk focuses on real-world challenges faced when doing those tasks.	Intermediate	Distributed Computing Is Hard, Lets Go Shopping	Friday	2014-04-11 16:15:00	2014-04-11 17:00:00
Bayesian statistical methods are becoming more common and more important, but there are not many resources to help beginners get started. Â People who know Python can use their programming skills to get a head start. I will present simple programs that demonstrate the concepts of Bayesian statistics, and apply them to a range of example problems. Â Participants will work hands-on with example code and practice on example problems. Students should have at least basic level Python and basic statistics. Â If you learned about Bayesâs theorem and probability distributions at some time, thatâs enough, even if you donât remember it! Students should bring a laptop with Python 2.x and matplotlib. Â You can work in any environment; you just need to be able to download a Python program and run it.	Allen Downey	Science	An introduction to Bayesian statistics using Python. Â Bayesian statistics are usually presented mathematically, but many of the ideas are easier to understand computationally. Â People who know Python can get started quickly and use Bayesian analysis to solve real problems. Â This tutorial is based on material and case studies from Think Bayes (OâReilly Media).	Intermediate	Bayesian statistics made simple	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
"While SQLAlchemy can be used in many ways, it's continuing API and usage evolution is geared towards an idiomatic style of application design, which may be referred to as the foundational application style.  In this style, the application is constructed in two major parts - the first, is the so-called ""foundation"" which defines patterns and conventions to be used throughout the application, such as base classes, common types and schema elements, and other patterns that may be repeated.  The goal of the foundation is to provide as many application details as possible so that they don't find themselves within model or use case logic.  The second part of the application is essentially the models and use cases themselves; this part builds upon, and indeed drives the structure and featureset of, the foundation.   The goal in this area is for models and use cases to be laid out in as declarative and non-repetitive way as possible.   This structure allows new use cases to be added very quickly and allows the overall direction and implementation mechanisms of the application to turn on a dime, with minimal impact on models and use cases as they continue to grow in scope and number. This approach is in contrast to the style proposed by many frameworks in the Python, Ruby and PHP worlds, which seeks to eliminate to as much a degree as possible the need for custom conventions, instead providing an ever broadening set of ""out-of-the-box"" conventions and helpers seeking to accommodate any possible scenario.  While this approach has the advantage of fast ramp up times and early prototyping success, as time passes and use case complexity grows, the mismatch between pre-fab convention and application can degrade quality and maintainability. SQLAlchemy is for applications that are in it for the long haul - instead of being geared towards the ecommerce application you wrote on the plane in 30 minutes, it's geared towards the ecommerce application that sold you the plane tickets. This talk will illustrate a simple Pyramid web application which highlights a variety of conventional patterns that I've been talking about for quite some time, including typing conventions using built-in and custom types, schema naming conventions using events, production of specific SQL expressions using custom SQL constructs, using helper functions and declarative mixins to produce succinct model declarations, simple session setup/teardown patterns, simple unit tests and transaction-enabled integration tests, Alembic migration configuration, and possibly other features."	mike bayer	Databases	"In this talk we'll illustrate a simple web application using SQLAlchemy, showing
off the style of development that SQLAlchemy is most geared towards, the so-called
""foundational"" style which provides for development and maintainance of custom 
conventions which then service the needs of the model declarations and use case
implementations."	Intermediate	Building the App	Saturday	2014-04-12 15:15:00	2014-04-12 16:00:00
A data structure stores information, but also optimizes some access patterns at the expense of others. You can build a Python list and set containing the same objects, but the two containers will offer different performance depending on which operations you attempt. This talk will explore how a single fundamental data type â the array-of-bytes implemented by your computer's RAM chips â is used to create all of the others, and how each data structure's implementation optimizes it for strict ordering, easy insertion and deletion, or quick access to an arbitrary element. We will explore every container in the entire Python Standard Library as well as a few from third-party packages including NumPy. A central theme will be: where are all of the linked lists and trees? How did data structures fundamental to early computer science, and to many functional data programming languages today, come to disappear in the era of dynamic languages like Python? We will look at the roles they once filled and why garbage collection, dictionaries, and easy filtering through list comprehensions have rendered these data structures obsolete for most programmers.	Brandon Rhodes	Best Practices & Patterns	"Why are Python programmers crazy about lists and dictionaries, when
other languages tout bitmaps, linked lists, and B+Â trees? Are we missing
out? Come learn how data structures are implemented on bare metal, how
to select the right data structure, how the list and dictionary cover a
wide swath of use cases, and when to dip into the Standard Library or a
third-party package for an alternative."	Intermediate	All Your Ducks In A Row: Data Structures in the Standard Library and Beyond	Friday	2014-04-11 10:50:00	2014-04-11 11:20:00
"Python for Social Scientists A) Greeting and Orientation - 15 min  Survey of programming levels in the audience. Survey of educational/research experience.   Confirm installation pre-requisistes:  python 2.7 or higher MatPlotLib A text editor    Break into pairs to be partners during the workshop. This to help keep from getting behind due to small questions.   Time Total: 0:15 B) Group Work: Import World Bank Data - 45 min  We will write a method to pull in CSV data from the World Bank Indicators page. We'll be using ""Ratio of girls to boys in primary and secondary education"" (http://data.worldbank.org/indicator/SE.ENR.PRSC.FM.ZS).  Output data to the console (ie a Python dict)  Time Total: 1:00 C) Group Work: Graph the Data, Time Series - 45 min   As a group, we will find and read through pre-existing code to borrow from, specifically this one of a bar series with two sets of data, ""Men"" and ""Women"" (http://matplotlib.org/examples/api/barchart_demo.html). Then we'll alter it to meet our needs and create 2 different charts:   Display ""Ratio of girls to boys in primary and secondary education"" across years, grouped by country for 2-4 chosen countries   2 axes:  One axis will display ratio of girls to boys in primary education"" across countries over time. The other will display another indicator from the World Bank library.   Share the pattern you found with the rest of your table.     Time Total: 1:45 D) On Your Own: Answer Your Own Question - 45:00  With your partner, pick another data set you find interesting. Pose a question that can be answered with that data.  Don't have to limit it to World Bank data set; any that outputs to .csv or .xls can work. Some resources:  SF city data: https://data.sfgov.org/ DC city data: http://data.dc.gov/ Daily Treaasury Statements from 1998 to 2013: https://fms.treas.gov/fmsweb/DTSFilesArchiveAction.do (TODO crawl websites and convert .txt to .csv if have time or see if results are in the github for https://github.com/csvsoundsystem/fms-treasury-statements-analysis) US Dept of Education: http://www.ed.gov/developer (NOTE many currently unavailable due to shutdown) US Dept of Defense open data sets http://open.defense.gov/Data.aspx (NOTE currently not available due to shurtdown) Science Hack Day listings: http://sciencehackday.pbworks.com/w/page/24500475/Datasets    Using tools we've learned so far, display the data in a way that answers your question. Teacher (and TA's hopefully) will be circling to answer questions   Time Total: 2:30 -- 15 min break, may be mixed in earlier with the on-your-own time -- Time Total: 2:45 E) Present to the Group - 15 min * Each pair in the tutorial will present the question they asked and what they found to the group. Time Total: 3:00"	Renee Chu	Science	Many provocative social questions can be answered with data, and datasets are more available than ever. Start working with it here. First we'll download and visualize one data set from the World Bank Indicators page together, using Matplotlib. Then you'll have time on your own to pick another data set from any online source and plot that. At the end every person/pair will share what they found.	Novice	Python for Social Scientists	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
Ansible is an open source project started in early 2012 that quickly became one of the most popular automation projects on GitHub.  It did this because it was very simple and easy to use, and concentrated on the way teams use tools and share information.  Written by a software software developer well versed in IT automation, and very much wanting to get done with his own automation projects as quickly as possible -- The goal of Ansible is for people to get in, get out, and move on to performing other business critical tasks.   Ansible seeks to be transparent and simple, but flexible enough for all kinds of IT tasks.    Ansible is somewhat unique in that it requires no additional software to be installed on remote machines -- it can start managing machines instantly, just using SSH, which gives it some very appealing security and management properties. This talk will detail how the changing landscape of computing requires new approaches to IT automation, and will show how to use Ansible to automate many of these types of problem spaces -- including deployment of applications (Python and otherwise), configuration management, and general purpose process workflow orchestration.   In particular, we'll give some examples of how to achieve zero-downtime rolling updates of web applications, as well as configure multi-tier application topologies with a minimum of hassle. Another key focus of this talk is extensibility -- we'll go into how to write new Ansible modules in Python, as well as how to extend it with a wide variety of plugins.	Michael DeHaan	Systems Administration	Learn about Ansible -- a radically simple way to deploy applications, configure operating systems, and orchestrate IT operations including zero downtime rolling updates.   Let's bring about SkyNet faster.	Intermediate	Ansible - Python-Powered Radically Simple IT Automation	Friday	2014-04-11 13:40:00	2014-04-11 14:25:00
"In 2012, Greg Wilson and Jorge Aranda published an essay titled ""Two Solitudes"" that decried the gulf between software engineering        practitioners and researchers.  They compared this unwillingness for the two sides to talk to each other to the unwillingness of Anglophones and       Francophones to talk to one another in Canada -- the original Two Solitudes. At PyCon Australia 2013, Alex Gaynor presented a keynote titled ""Programming and Programmers"".  He lamented the state of the art in software           engineering and raised many interesting questions.  Many of these questions are actively being researched in academia, but you wouldn't know it,       because academics aren't talking to practitioners.  And even if you did know about this research, you wouldn't be able to read it without paying an arm and a leg for   access. This talk aims to bring the two solitudes closer together.  I will discuss what research is being done, who is doing it, and what they want from open source developers.  Perhaps more importantly, I'll talk about what open source developers might want from them. Finally,  I will present a plan for tricking academia into paying attention to the Python ecosystem."	Tavish Armstrong	Other	"Software engineering researchers and hackers don't talk to each other as much as they ought to. This talk aims to bridge that gap, teach practitioners about what research is out there, and spark a ""citizen science"" movement in software engineering.  I'll explain how to study your own projects and get academics to pay attention.  Together, we can learn how to develop better software."	Novice	Software Engineering Research for Hackers: Bridging the Two Solitudes	Sunday	2014-04-13 14:30:00	2014-04-13 15:00:00
Abstract This project demonstrates the wide versatility of the python programming language in a distributed system in which low-level code is required to interact with hardware components, and high-level code is preferable where development time and deployability are important factors. The entire blimp project consists of:  Wireless Remote Client application and GUI Autopilot Algorithm Live Video Feed Using OpenCV Hardware Integration Canon Camera Software Development Kit Roboard RB-110 XBEE RF Modules Accelerometer, voltage sensor, compass, GPS Django application to distribute and manage photos using EXIF data 	Scott Lobdell	Other	This talk documents the journey of a less than conventional robotics application in which python is used as the logical controller of an autonomous 20 foot blimp.  The blimp's autopilot features, prolonged air time, large size, and smooth motion make it the ideal platform for aerial photography.  Giving the blimp an onboard controller reduces the overall costs and requirements of the operation.	Intermediate	Programming an Autonomous 20 Foot Blimp with Python	Saturday	2014-04-12 17:10:00	2014-04-12 17:40:00
âSo You Want to Build an APIâ is the talk for impressionable programmers whoâve used APIs but may have been hesitant to build them into their own applications, until now! Beginning with best practices and design patterns of a RESTful API, we will lead into a tutorial style talk that will guide the audience through the process of creating an API from scratch. You will learn how quick, easy and painless this process is with the help of our favorite language, Python and the     lightweight framework Flask.	Megan Speir	Best Practices & Patterns	You might know what an API is. Maybe you've even implemented a handful of popular APIs out there, but you are thinking about building your own and donât know where to start. This talk will show you how easy it is to build an API into your project using Python and Flask. Weâll also discuss best practices and design patterns for great APIs.	Novice	So You Want to Build an API?	Saturday	2014-04-12 11:30:00	2014-04-12 12:00:00
"This talk broadly has two parts: things people think make Python slow, and why those aren't true. And common practices people have in their code (often under the guise of ""writing idiomatic Python"") which do lead to slow performance. This talk attacks the notion that things like dynamic typing, boxing, and GC make Python slow. And instead lays the blame at our feet, at the code we write, the way we write code differently from programmers in other languages. You'll leave this talk with a better understanding of how the code you write affects the performance of your applications."	Alex Gaynor	Best Practices & Patterns	"The common wisdom is that Python is slow. And yet people run high performance
software on it. It's hard to make Python fast, and yet there are incredibly
high performance Python VMs. This talk breaks down the facts and the myths
of Python performance."	Intermediate	Fast Python, Slow Python	Saturday	2014-04-12 16:30:00	2014-04-12 17:00:00
Flask is a small and easy to use, yet fully featured open source web framework written in Python. Its code is concise and well written, you can read it all and understand it. In this session you will learn the Flask way by watching me build a complete application in front of your eyes. Some of the topics included in this tutorial are:  Single-file applications Multi-file structure for larger applications Templates Web forms Databases User Authentication Administration Panel Social features (followers, timeline pages) Ajax and RESTful APIs Deployment options  In addition to the Flask core modules (Flask itself, Jinja 2 template engine, Werkzeug) you will learn how to use a number of Flask extensions such as:  Flask-WTF for web form handling Flask-SQLAlchemy for database management Flask-Login for user authentication Flask-Bootstrap for CSS styling Flask-RESTful for APIs 	Miguel Grinberg	Web Frameworks	"Flask is a web framework for Python based on Werkzeug, Jinja 2 and good intentions. It is considered a micro-framework, but don't get the ""micro"" part fool you; Flask can do everything others can do, many times in a simpler, leaner way.  In this tutorial session you will follow me as I write a complete web application in front of your eyes using the core framework and a handful of extensions."	Intermediate	Flask by Example	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
Long gone are the days of simple websites -- what were once simple CGI or PHP scripts are now an amalgamation of Python packages, databases, caching layers, and task queues.  The cognitive load of all these different technologies strains even the most seasoned Python developer, encouraging bad practices that may end in disaster (or downtime).  Configuration management tools allow you to treat your infrastructure as code: it can be revision-controlled, packaged, and reused.  While Python-based configuration management tools are nascent, they still lack the maturity and features provided by the Ruby-based solutions like Puppet and Chef.  Unfortunately, these tools present a steep learning curve to Python developers unfamiliar with the dark arts of server administration, virtualization, and Ruby. Puppet provides a DSL for expressing system configuration that is popular among system administrators and developers.  Puppet modules are containers for related configuration code, and are combined for the specific needs of your application.   This presentation shows the Python developer best practices when using, writing, and testing Puppet modules.  Moreover, releases from the Puppet Forge (a PyPI for modules) are recommended for managing Python, popular web servers, databases, and web frameworks.	Justin Bronn	Systems Administration	"Puppet modules provide reusable operations (""ops"") code in a manner analogous to Django apps.  This talk explores the Puppet ecosystem through the eyes of a typical Python developer, and demonstrates how to use Puppet modules effectively to deploy and secure Python web applications."	Intermediate	Puppet Modules: Apps for Ops	Friday	2014-04-11 14:35:00	2014-04-11 15:05:00
Machine learning is the branch of computer science concerned with the development of algorithms to which can learn from previously-seen data in order to make predictions about future data.  It has become an important aspect of work in a variety of applications: from optimization of web searches, to financial forecasts, to studies of the nature of the Universe. This tutorial will give an hands-on experience on  some more advanced aspects of applied machine learning with the scikit-learn package.  In particular we will focus on text processing, out-of-core learning and distributed model fitting, selection and ensembling.	Olivier Grisel,Jake Vanderplas	Science	This tutorial session is an hands-on workshop on applied Machine Learning with the scikit-learn library. We will dive deeper into scikit-learn model evaluation and automated parameter tuning.  We will also study how to scale text classification models for sentiment analysis or spam detection and use IPython.parallel to leverage multi-CPU or ad-hoc cloud clusters.	Intermediate	Diving deeper into  Machine Learning with Scikit-learn	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
Twisted is an event-driven networking library.  The problem that Twisted is trying to solve is dealing with networking events in Python.  Without Twisted, software would have to interact with sockets and deal with the fact that the results of networking operations are not immediately available.   Twisted provides mechanisms so that software does not have to interpret socket operations and does not have to block while a network operation is in progress.  This means that software can operate at a conceptually higher level of networking and can operate with a high degree of concurrency. Twisted provides some basic abstractions upon which it builds ands offers many options.  The reactor is an event loop which monitors sockets and calls back into higher level Python code when events occur.   Above the socket level, Twisted makes a distinction between transports and protocols.  A transport represents a connection over which bytes are transported such as TCP connections or UNIX pipes.  A protocol represents a networking protocol such as HTTP or SMTP.  Protocols are paired with transports but by separating the concerns, Twisted makes it easy to mix and match.  Protocol factories are used to create protocols when new connections are established.  Deferreds are a mechanism to specify what should happen in the future when an event occurs. Upon these basic abstractions, Twisted has built a large library of code for a wide range of networking protocols.  Twisted provides working implementations of many things such as HTTP, SMTP, POP, IMAP, FTP, IRC, SSH, DNS servers and clients.   They can be used as the basis for further specialized applications or they can be run as standalone applications with the twistd utility.	Stacey Sern	Python Libraries	Twisted is an event-driven, networking library.  This talk aims to explain what that means and give an overview of some of the main Twisted concepts.  It will also describe some of the functionality that Twisted offers out of the box.	Novice	An Introduction to Twisted	Friday	2014-04-11 13:55:00	2014-04-11 14:25:00
Yelp had a problem: how to process a mountain of logs in a distributed, fault-tolerant way.  Sounds like a perfect fit for Hadoop, right?  Just one problem: we love Python and wanted to use its conciseness and power, not to mention existing libraries and business logic, to analyze our data.  So we wrote mrjob, which tries to combine the best of the Hadoop and Python worlds.  With mrjob you can easily write MapReduce jobs in native Python, which can be executed via Hadoop Streaming on in-house Hadoop clusters or services like Amazonâs Elastic MapReduce. This tutorial will start with a brief introduction to the MapReduce paradigm.  What are the trade-offs this approach provides?  By giving up global state and variables, MapReduce buys you scalability and fault tolerance. Then we will cover an example: counting user activity in a log.  We will walk through a simple mrjob program, then ask participants to tweak the code to achieve different outputs.  mrjob has the option of running locally, so setup will be simple and attendees can focus on learning the framework instead of messing with cluster configurations. Next we will explain how to use mrjob to analyze more complex data using the Yelp dataset.  Weâll introduce some data science concepts, such as user-user similarity, and show how to calculate these metrics in mrjob.  Again, participants will be asked to extend the example to improve its sophistication. Finally, we will demonstrate how to deploy mrjob to a production cluster using Amazonâs Elastic MapReduce service.  Participants will walk away with the ability to deploy an mrjob based solution in their workplace, from testing, through deployment, to monitoring.	Jim Blomo	Python Libraries	This tutorial will take participants through basic usage of mrjob by writing analytics jobs over Yelp data. mrjob lets you easily write, run, and test distributed batch jobs in Python, on top of Hadoop. Hadoop is a MapReduce platform for processing big data but requires a fair amount of Java boilerplate. mrjob is an open source Python library written by Yelp used to process TBs of data every day.	Intermediate	mrjob: Snakes on a Hadoop	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
" Global memory consumption of the process (RSS memory) Understand reference cycles Generate a picture representing links between objects Use gc.get_objects() and ""manually"" compute the size of objects PEP 445: ""Add new APIs to customize Python memory allocators"" implemented in Python 3.4 Use the pytracemalloc module (PEP 454) to trace memory allocations at their creation Use pyfailmalloc module to inject MemoryError in your application to test how it behaves in low memory condition "	Victor Stinner	Python Core (language, stdlib, etc.)	Memory leaks in Python cannot be analyzed with traditional tools because Python uses reference counters. I will present tools specific to Python to help you to localize your memory leaks.	Intermediate	Track memory leaks in Python	Saturday	2014-04-12 10:50:00	2014-04-12 11:20:00
Have you ever wondered which rapper is the most sexist? Come learn how to find out by scraping rapgenius and analyzing rap lyrics using Python with libraries like pattern and Beautiful Soup! We'll cover how to get a large corpus of rap lyrics to analyze, how to scrape the lyrics out of a web page, look at the incidence of certain words in the data stream, and then see how well this works as a sexism metric. Programmers will leave knowing how to tackle an interesting real-world data scraping and analysis problem using novel data.	Julie Lavoie	Other	Have you ever wondered which rapper is the most sexist? Come learn how to find out by scraping rapgenius and analyzing rap lyrics using Python with libraries like pattern and Beautiful Soup! There will be pictures of Lil' Jon.	Novice	Analyzing Rap Lyrics with Python	Saturday	2014-04-12 12:10:00	2014-04-12 12:40:00
Most of us think that a REST API is all you will ever need to support mobile clients with your Python service. But in many cases adding Push Notifications will open the door to a whole host of new information flows you might have been previously unaware of.  This talk will introduce you to Push Notifications, how they work, their advantages and disadvantages. We will explore their basic architecture, the ins and outs of Google's and Apple's implementations and how you can harness that power on your Python project. Finally we'll take a look at a couple of Companies that offer solutions to abstract some of the complexities of implementing Push Notifications.	Juan Gomez	Other	This talk will introduce you to Push Notifications, a very powerful way for your Python service to communicate information to mobile devices. You will learn how Push Notifications work, their advantages and disadvantages and how you can implement them on your Python projects.	Novice	REST is not enough: Using Push Notifications to better support your mobile clients	Saturday	2014-04-12 14:35:00	2014-04-12 15:05:00
We talk a lot about the things people can do to get the most out of being a software developer. We talk about testing, design patterns, contributing to open source, and many other topics. All of these things are important, but for some of us there's an important piece of the puzzle being overlooked. It can be hard to focus on your love of coding when you are regularly battling invisible issues like insecurity, anxiety, and lack of confidence. These issues create hurdles that get in the way no matter how much you improve as a software engineer. It is important that we talk about these issues because an unwillingness to admit they're real can make it worse. It makes them feel like the adult version of the monsters under the bed. It's scary and isolating because those around you don't understand or actively deny what you're going through. It's dangerous to go alone! Let's start talking about these issues, so people have the tools and support to fight back. You may have experienced these issues first-hand and need some help. You may want to learn more, so you can help others. This talk is for all of you. I'll identify invisible issues programmers struggle with, talk about their impact, discuss personal experiences dealing with them, and share some tools I found useful in fighting back.	Julie Pagano	Community	It can be hard to focus on your love of coding when you are regularly battling invisible issues like insecurity, anxiety, and lack of confidence. This talk will identify invisible issues programmers struggle with, talk about their impact, discuss personal experiences dealing with them, and share some tools useful in fighting back.	Novice	It's Dangerous to Go Alone: Battling the Invisible Monsters in Tech	Saturday	2014-04-12 17:10:00	2014-04-12 17:40:00
In this tutorial we explain how to download and run your own (zero configuration) web application stack locally on your computer. You will build and leave with a working web application that can serve as a reference for future web work. This tutorial is focused on web development with python, so we will cover the design decisions that are particular to web2py and how they compare with other solutions in the landscape of python based web frameworks. We will pay particular attention to the Model-View-Controller (MVC) fundamentals, static content, and deployment/scaling options. Prerequisite Knowledge How to use a basic plain text editor -- VI, Emacs, Note Pad, GEdit, Kate, nano, Pico, BBEdit, etc. Basic Python -- You should know basic loops, and what a function or callable is. Basic web application use -- Have you ever filled in a web form and clicked submit/go/search/I'm feeling lucky?  Prerequisite Setup Unix-like platforms (*BSD, Linux, Mac OS X, Cygwin, etc...) : installation of python 2.6.x or 2.7.x (not 3.x) Windows (XP, 2000, Vista, 8, 8.1) : nothing Dont' worry about  Being a great (or even good) programmer Knowing more python than you already do Knowing template systems like Jinja, Mako, Cheetah, etc. Knowing any Object Relational Mappers (ORMs) or databases Knowing anything about existing web frameworks Having a favorite editor 	G. Clifford Williams	Web Frameworks	This tutorial teaches basic web development for people who have some experience with HTML. No experience with CSS or JavaScript is required. We will build a basic web application using AJAX, web forms, and a local SQL database.	Novice	0 to 00111100 with web2py	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
"In 2005, I was hired to go look at some source code sitting on a machine in a secret vault with no connection to the outside world.   What I found was 1.5 TBytes (yes, that's Terabytes) of C++ source code sitting on a Windows XP machine locked within a steel cage.    What was it?  What did it do?  Was it complete?   How to make any sense of it?    My instructions were to use Windows Notepad. Sitting in the vault, I opened up a windows command shell and typed ""python"" just for kicks.  It sprung to life with a >>> prompt.  If by some miracle, the machine vendor had used Python for an OEM tool.  It was there!    Now, what does one do with nothing more than Python, Notepad, Windows, and all of that C++ source?  Everything! In this talk, I'll describe what actually happened in the confines of the secret vault.   This will include various software analysis techniques, coding practices, as well as their relation to the  ultimate objectives of the project in the broader context of the legal case.     I'll do some demos in which I turn all of this around and perform some analysis on the Python source code itself."	David Beazley	Other	"So, what happens when you lock a Python programmer in a secret vault containing 1.5 TBytes of C++ source code and no internet connection?  Find out as I describe how I used Python as a secret weapon of ""discovery"" in an epic legal battle."	Novice	Discovering Python	Saturday	2014-04-12 15:15:00	2014-04-12 16:00:00
Using a the example of some cyclist sensor data from MontrÃ©al, I'll explain how to  clean up data (fix date formatting issues, remove null values, ...) graph the data scrape weather data from the weather office website and look at the relationship between temperature & cyclists aggregate the data to find out how many people bike on weekdays vs weekends talk about possible directions to take the project (make a model using   scikit-learn) 	Julia Evans	Science	I'll walk you through Python's best tools for getting a grip on  data: IPython Notebook and pandas. I'll show you how to read in data, clean it up, graph it, and draw some conclusions, using some open data about the number of cyclists on MontrÃ©al's bike paths as an example.	Novice	Diving into Open Data with IPython Notebook & Pandas	Saturday	2014-04-12 13:55:00	2014-04-12 14:25:00
Building importers that consume other peoples' data can sometimes feel a bit like dumpster-diving. Non-compliant formats, network errors and missing data are just some of the many ways your importer is a ticking time bomb. This talk presents ways to diffuse that bomb, so when the data's broke, you can still be the hero. To help preserve your hero status, we'll be talking about:  Common pitfalls How to structure your importer better The importance of logging & how to manage it Failure cases & how to address them Processing the data  We'll also talk about what tools you can use to help get the job done, how to keep it running fast/light/smooth & a few war-stories of my mistakes laid bare for some good-old public shaming.	Daniel Lindsley	Best Practices & Patterns	Building importers that consume other peoples' data can sometimes feel a bit like dumpster-diving. Non-compliant formats, network errors and missing data are just some of the many ways your importer is a ticking time bomb. This talk presents ways to diffuse that bomb, so when the data's broke, you can still be the hero.	Intermediate	Creating Bomb-Proof Data Importers	Friday	2014-04-11 11:30:00	2014-04-11 12:00:00
I will teach regular expressions by starting with the simple building blocks and moving toward the complex, which will give an understanding of how these various aspects of a well-formed regular expression work together to match (or not match) text. This talk will cover: character classes, repetition, string and word boundaries, and referencing all or part of a match for use later.	Luke Sneeringer	Python Core (language, stdlib, etc.)	Many developers, including quite a few experienced developers, are absolutely confounded by regular expressions. However, regular expressions aren't as difficult as many believe. In this talk, I will teach regular expressions by starting with the simple and moving toward the complex, so that you too can read and write regular expressions like a hero.	Intermediate	Introduction to Regular Expressions	Friday	2014-04-11 10:50:00	2014-04-11 11:20:00
"The age of Python 3 is arriving. With more libraries and frameworks available for Python 3, the interest has increased in seeing ""Is it now safe for me to use it?"" This tutorial is for those ready to give Python 3 web development a try, as well as those interested in Pyramid as a web framework for either Python 3 or 2. (Note: The tutorial works fine under both.) The tutorial starts with an introduction to Pyramid, then has a series of 12 steps, each with hands-on code. The material is authored in Sphinx and available on GitHub, along with the sample code and deep linking to Python and Pyramid related topics."	Paul Everitt	Web Frameworks	Python 3 is upon us! This lively, hands-on tutorial covers a little about a lot, showing Python 3 (and 2) web development using Pyramid, a fast, modern, lightweight web framework. Fun, fast-paced, and most certainly not aimed at experts.	Novice	Python 3/2 Web Development with Pyramid	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
This carefully constructed course will take you from no knowledge of Python to the ability to read and write basic Python. With a unique, fast-paced combination of lecture and lab, the student will quickly cover most of the basic aspects of Python. In addition, attendees will recieve a copy of the slides, a cheatsheet covering the material, and a copy of Treading on Python Volume 1. This course has been given at various conferences and is meant to quickly get you off on the right path to grokking Python. Bring a laptop with Python (2 or 3) installed and a desire to learn the basics.	matt harrison	Python Core (language, stdlib, etc.)	Do you want to dive right into Python? This hands-on tutorial assumes some programming experience (no Python required) and walks you through the basics of the language. Through a carefully crafted series of lectures and assignments you will be thinking like a Pythonista in no time. Bring a laptop with Python (3 or 2), your favorite editor, and a desire to get your hands dirty.	Novice	Hands-on Beginning Python	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
"After half a lifetime ""undercover as a man"" I transitioned from male to female while staying involved in the Python community. This talk discusses that transition and explores how I found life in Python as a woman different from my former life as a man. This talk will include a brief discussion of what being transgender means, my experiences as I came to terms with it, and the losses and gains transition entailed. Early on I made the decision to be as open as possible and to stay engaged in the Python community as I  transitioned and I will discuss why I made that decision and the levels of acceptance and support I encountered.  Transition has been wonderfully successful, but that very transition put me in a surprisingly new world. Now being part of not one, but at least 3 groups that are minorities in the Python world gave me a very different view of a community I thought I knew, and pushed me to being an activist (or trouble maker) in spite of myself. I will discuss the experiences that have convinced me that privilege is very much alive and well in the Python world."	Naomi Ceder	Community	"After half a lifetime ""undercover as a man"" I transitioned from male to female while staying involved in the Python community. This talk discusses that transition and explores how I found life in Python as a woman different from my former life as a man."	Novice	Farewell and Welcome Home: Python in Two Genders	Sunday	2014-04-13 13:10:00	2014-04-13 13:40:00
Part 1: What's the problem? We'll start by looking at the problem that import tries to solve: allowing python code in one module access to code in another module.  I'll introduce the idea of a namespace and draw an equivalence between a namespace and a dictionary as an example of a simple lookup table. Part 2: How do we solve it? We'll examine possible ways to allow code from one module to access code in another module.  I'll suggest different strategies and discuss their advantages and disadvantages. I'll show that those design decisions were made in other languages.  For example, we could insert all the code from Module B into Module A at compile-time.  The strengths: easy for the programmer to reason about (and others). The weaknesses: namespace collision and a rigid import system that can't change at runtime (and others).  The analogy: C's #include.  There will be three of these sections, each taking about three minutes to discuss. Part 3: Home to python This section will transition from the last by proposing a solution to code-sharing that mirrors python's actual implementation of import.  We'll discuss strengths and weaknesses of the model.  I will briefly cover the steps of the import process: finding a module and returning a loader; checking in sys.modules for the module object; initializing a new module object, if needed; and executing the module's code object in the context of the new module object just created, if needed. Part 4: An artisan hand-crafted module I will follow the steps required to create a module by hand, without using import.	Allison Kaptur	Python Core (language, stdlib, etc.)	Suppose `import` didn't exist, and we had to invent it from scratch.  We'll look at the problem - code sharing and reuse across modules - and different ways we could solve it.  We'll come up with `import` from parallel universes and then reinvent python's actual implementation.  Finally, we'll import - using python's design - without using the `import` keyword.	Novice	Import-ant Decisions	Friday	2014-04-11 12:10:00	2014-04-11 12:40:00
Predicting the future! scikit-learn is an awesome tool allowing developers with little or no machine learning knowledge to predict the future! Once you've trained your algorithm, one of the first issues you'll tackle is how to deploy it. There are many requirements to take into account when deploying your algorithm in a production environment. Message loss and scalability are two of the bigger issues you'll have to deal with. But how? I'll work through each of the design issues and build an example system for making language predictions using scikit-learn and RabbitMQ. I'll start off by training a scikit-learn model using data from Wikipedia. Next I'll show a simple web UI similar to Google Translate which I'll use to input data into the algorithm. I'll discuss the issue of message loss, and why RabbitMQ is a good fit for solving this problem. I'll write a simple AMQP worker which will wrap the scikit-learn model. I'll review the overall design of the solution.  Finally I'll demo the system in action by predicting the language of some text.  I'll wrap up the talk by covering some other important design decisions that you'll want to consider when deploying this type of solution in a production environment.	Michael Becker	Python Libraries	scikit-learn is an awesome tool allowing developers with little or no machine learning knowledge to predict the future! But once you've trained a scikit-learn algorithm, what now? In this talk, I describe how to deploy a predictive model in a production environment using scikit-learn and RabbitMQ. You'll see a realtime content classification system to demonstrate this design.	Intermediate	Realtime predictive analytics using scikit-learn & RabbitMQ	Friday	2014-04-11 15:15:00	2014-04-11 16:00:00
A decorator is any callable Python object that is used to modify a function, method or class definition. A decorator is passed the original object being defined and returns a modified object, which is then bound to the name in the definition. One would generally expect the result of applying a decorator to an object to be another object which is not readily distinguishable from the original. Naive implementations of decorators do not however preserve introspectability. This can result in callable objects having different names, appearing to have different signatures or not returning the original doc strings. This can cause problems for tools where you want to derive information about the original wrapped object such as debuggers, IDEs, documentation systems or performance monitoring software. The use of the functools.wraps() decorator addresses some of these issues, but relies on decorators being implemented as closures. Using a closure to implement a decorator will not always work when wrapping functions where the descriptor protocol needs to be triggered to bind a function to an instance, to create an instance method, or where the function is a special method type such as a class method or static method. A more robust decorator, and one where the decorator is able to distinguish when it is being applied to a normal function or instance method, needs to be implemented as a combination of a wrapper and a descriptor. To also be able to use this as a generic wrapper when performing monkey patching requires even more tricks. The purpose of this talk is to walk through the various problems which arise with the more common ways of implementing decorators. It will then describe how to create a more robust generic wrapper/decorator which can be used in a wider range of scenarios than typical decorators.	Graham Dumpleton	Best Practices & Patterns	Decorators are a simple concept, yet extremely powerful. Implementing decorators which will work in a range of contexts is however non trivial. This talk will walk through various problems which arise with the more common ways of implementing decorators and then describe how to combine a wrapper and a descriptor to build a better decorator.	Intermediate	Advanced methods for creating decorators.	Friday	2014-04-11 17:10:00	2014-04-11 17:40:00
Decorators are one of the coolest constructs in Python.  Although they aren't necessary in many python scripts/applications, there are certain problems that decorators solve beautifully.  The average python programmer may have heard of decorators, may have even used them from time to time.  But many python programmers don't know how decorators work, or often even how to construct them! This session will be a fairly in-depth exploration of decorators:  how to construct them, how they work, and how to use them in your code.  By the end of the session, you should have a moderate understanding of how decorators work, and should be able to use them in your own projects.	Colton Myers	Python Core (language, stdlib, etc.)	Decorators are an invaluable addition to anyone's arsenal of python tools and tricks.  We will learn what a decorator is, how decorators are created, and then explore some of the cooler applications for decorators in our everyday projects.	Intermediate	Decorators:  A Powerful Weapon in your Python Arsenal	Friday	2014-04-11 11:30:00	2014-04-11 12:00:00
"This talk will spend time walking through a Lisp front-end called ""Hy"" that compiles down to Python bytecode by way of Python AST. The process of importing, compiling and running Hy in a way that is transparent to Python helps to demonstrate how you can use these tools to target the Python runtime in ways that folks don't generally take advantage of.  (cuddles, the cuttlefish, our mascot) The talk will focus on some lesser-known parts of Python internals, such as:   AST, such as why it's a good tool to have, when to use it, and how Hy uses AST to create Python code to be run.   Brief overview of some of the changes between Python 2.x AST and Python 3.x AST   How we can trick the Python debugger to debug Hy by correctly annotating the AST   PEP 302 import hooks, how we can use these to allow custom code to be run in a transparent way to Python   Look over core Python formats, such as the .pyc, and how we can create a .pyc file from Hy code.   The goal of this talk is to motivate people to learn more about Python, and start to think of Python in a more sophisticated and nuanced runtime, not unlike the JVM."	Paul Tagliamonte	Python Internals	"This talk will cover the internals of Python, such AST, Import hooks, creating a console, and a very brief overview of Python internal formats (such as pyc files), by way of looking over the implementation of a Lisp called ""Hy"". No Lisp knowledge is required."	Intermediate	Getting Hy on Python: How to implement a Lisp front-end to Python	Friday	2014-04-11 15:15:00	2014-04-11 16:00:00
This talk covers simple but lesser known techniques for dramatically improving your website's security, with an eye to what Django, Flask, and Pyramid provide out of the box. Specifically:  HTTP Strict Transport Security (HSTS) Content Security Policies (CSP) Secure / HttpOnly cookies Isolated domains for user content Avoiding passwords 	Dan Callahan	Security	Learn quick, easy, and lesser-known techniques to improve your website's security, protect against session hijacking, and defend against XSS and data injection attacks.	Novice	Quick Wins for Better Website Security	Saturday	2014-04-12 14:35:00	2014-04-12 15:05:00
The rule of thumb for people without degrees in cryptography on securing data on the Internet is âGPG for data at rest. TLS for data in motionâ.  And itâs actually a very good rule everyone should follow. The only kicker though is that configuring (and using!) TLS properly is not as simple as it sounds and if youâre not diligent as a user, developer, and ops engineer, you can easily compromise your dataâs security despite best effort of everyone else. This talk will be multifaceted; you will learn:  how SSL and TLS roughly work and why their state is sorry, server- and client-side duties for best possible security, what alternatives you have for using TLS in Python, things to keep in mind when configuring servers, and what perils outside your control still can trip you up.  In other words, the leitmotif is to show you the most common traps you should know about when using and deploying applications relying on TLS for transport layer security and how to avoid them.	Hynek Schlawack	Security	Those web pages with shiny lock icons boasting that your data is safe because of â256 bit encryptionâ? They are lying. In times of mass surveillance and commercialized Internet crime you should know why thatâs the case. This talk will give you an overview that will help you to assess your personal security more realistically and to make your applications as secure as possible against all odds.	Novice	The Sorry State of SSL	Saturday	2014-04-12 13:40:00	2014-04-12 14:25:00
When we decided to rebuild our website as a one-page app using Angular.js on top of Django, a lot changed. We had to rethink the way we did APIs, the way we rendered templates, the way we thought about page load speeds. As the world of JavaScript frameworks starts to mature and more Python projects adopt them, I wanted to go through some of what we learned the hard way. The internet is vast, but it's still pretty sparse on best practices and explanations of how to work on large projects with these tools. If you're about to embark on a project with a JavaScript framework or if you've struggled setting up your own project, I'll give you some tips and signposts to light your way.	Jeff Schenck	Web Frameworks	AngularJS is a really exciting tool for building super slick single-page apps. But if you want them to play nice with a Python backend (Django, Pyramid, Flask, etc.) you're going to have to do a little bit of wrangling. These are the design patterns that worked for us.	Novice	Straightening Out AngularJS with Python	Friday	2014-04-11 14:35:00	2014-04-11 15:05:00
Modern web applications are immensely complex collections of multiple interacting systems. Many new web developers don't have the time to learn all the different pieces and tools, and often their application stability and agility suffer for it. This talk will cover a few of the major groups of tools involved in running an application including databases, web servers, and configuration managers.	Noah Kantrowitz	Systems Administration	Deploying a moderately complex web application has become quite a challenge over the years. As best-practices have evolved, it has become progressively more time-consuming to keep up with what tools exist and how to use them effectively. This talk will provide an overview of the ecosystem and provide pointers for more information about individual components or problems.	Novice	Application Deployment State of the Onion	Friday	2014-04-11 16:30:00	2014-04-11 17:00:00
"This talk presents issues which block adoption of Python3 by applications and libraries which are ""downstream"" of unported dependencies, and offers practical suggestions for making incremental progress toward porting an entire stack.  These suggestions are based on the author's experience porting the Zope component architecture, ZODB and related dependencies, including a large body of C extensions."	Tres Seaver	Best Practices & Patterns	This talk is an experience report / best practices summary, based on work porting a very large stack to Python 3.x.   The stack includes the Zope3 component architecture, ZODB, WebOb, pyramid, other dependencies, totalling ~180 KLOC Python + ~25 KLOC C.	Intermediate	By Your Bootstraps:  Porting Your Application to Python3	Friday	2014-04-11 12:10:00	2014-04-11 12:55:00
Testing is essential for code quality. Tests need to be automated and regularly run to benefit from them. Frameworks such as pytest are based on many years of exercise and help you apply best practices to your tests.  Apart from integrating well with existing unittest/nose test suites, pytest offers some unique features for writing and organising your test code. In six steps we introduce main features of py.test, with a strong focus  on best-practise organisation of test fixtures and code.  We discuss  key strategies for using py.test with existing unittest/nose code bases  and how to incrementally make use of py.test mechanisms.	Holger Krekel	Testing	Many people learn testing through the JUnit/PYUnit paradigm.  Lately, py.test's new  fixture mechanisms have gained traction among many Pythonistas.  This tutorial explores py.test discusses key strategies how to benefit from using py.test for your existing unittest/nose based code bases.	Intermediate	Improving automated testing with py.test	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
Docker is an open source tool that simplifies managing Linux containers. A container is a sandbox environment that runs a collection of processes. Containers are light-weight VMs that share the same kernel as the host OS.  Docker adds some niceties to Linux containers such as AUFS, version control, docker registry (repository), versioning etc. This talk will serve as an introduction to working with docker tools. I'll cover the basic concepts behind docker and explain the difference between a docker container and a VM. Show a demo of how easy it is to create a docker image and launch a container from it. Briefly explain the idea behind Dockerfile and show some examples.  I'll cover how networking and filesystem changes are handled in Docker. Show a demo of how to deploy a Django application in docker and explain why it's useful to do so in production.  I'll also cover some common use cases of docker in the industry such as testing, deployment, PAAS etc.	Amjith Ramanujam	Systems Administration	Docker is a tool for sandboxing entire application environments using Linux containers. Docker's feature set includes versioning, sharing etc.  They are light-weight and fast, you can recreate a deployment environment in development or push your development containers to production. Imagine never having to worry about fragmentation of servers or syncing the versions of different libraries.	Novice	Introduction to Docker	Saturday	2014-04-12 10:50:00	2014-04-12 11:20:00
Many web programmers think they need to find web hosting before they can share their cool creations. Instead, in this talk, we show you how to let others connect straight to your computer. It's useful for briefly getting feedback on a new Flask app, and for setting up a permanent computer to serve your Internet things to the world. The Internet was created to connect all the computer networks -- it is the network between the networks. A key tenet was that every computer should be able to send messages to any other computer. That's still true today, but if you want to run your own web server at home, or let other people send email straight to your living room with no Google in the middle, there are a few things you'll need to know. The talk emphasizes visuals, to cement your knowledge, and will conclude with recommended resources on how to follow up on each of these techniques.	Karen Rustad,Asheesh Laroia	Systems Administration	Learn how to let other people connect straight to your computer, so your Python web apps, email services, or anything else can be seen by the world. It starts simple, then explains when and how to use SimpleHTTPServer, ssh tunnels, Pagekite, and IPv6. You can use these tools for temporary connections, like sharing an in-progress demo, or for permanent connectivity for your home server.	Novice	Turn Your Computer Into a Server	Friday	2014-04-11 12:10:00	2014-04-11 12:55:00
"This talk doesn't hope to be an end-all-be-all of ""which library is best"" but instead will aim to provide a more in-depth analysis of the variety of scraping libraries that are available. It aims to give the attendees the tools they need in order to evaluate how they can utilize python scraping libraries to achieve their own goals and which pitfalls they might avoid by architecting their projects and library choice to best reflect the goals they have for their project."	Katharine Jarmul	Python Libraries	Ever wondered how python web-scraping libraries compare in terms of speed and accuracy? Iâll review lxml, html5lib, BeautifulSoup and scrapy with a series of sites evaluating how quickly they can parse pages and how accurately they can find data, particularly pieces of data that render after DOM loading and other pesky bits like hidden form data, internationalized data and mobile-compliant sites.	Intermediate	Python Scraping Showdown: A performance and accuracy review of top scraping libraries	Friday	2014-04-11 12:10:00	2014-04-11 12:40:00
Search is a part of everyone's everyday life at this point. We're generating petabytes of data every day, and we need to be able to find the data that we want in all the noise.  So you get it! Your app has a bunch of data in it and you want your users to be able to find what they want easily by searching it.	Christine Spang	Python Libraries	Data is everywhere! And most of the time, the best way to find what you want in a pile of data is to search it. In this project-based tutorial, you'll get an introduction to the basic theory of search and write a program to index and search a collection of  Wikipedia documents using the Whoosh library. You'll leave with the ability to add search functionality to all of your own projects.	Intermediate	Search 101: An Introduction to Information Retrieval	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
This is a hands-on course. Students are strongly encouraged to work along with the trainer at the interactive prompt. There will be exercises for the students to do on their own. Experience shows that this active involvement is essential for an effective learning.	Mike MÃ¼ller	Other	Although Python programs may be slow for certain types of tasks, there are many different ways to improve the performance. This tutorial will introduce optimization strategies and demonstrate techniques to implement them. Another objective of this course is to help the participants to gain the ability to decide what might be the optimal solution for a specific performance problem.	Intermediate	Faster Python Programs through Optimization	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
Come and join us to learn about how to use Python on hardware such as the RaspberryPi to build your own super-cool home automation system! In this tutorial Rupa and Akkana from CodeChix Bay Area will walk you through the setup and code for building your own PiDoorbell project. PiDoorbell is an open source project that anyone with a Raspberry Pi or similar hardware can use for monitoring and notification of visitors at your front door (or any place you mount it). We will show you the essentials of the hardware, what software you need to install, will help you write the code to connect all the dots (proximity sensor, RPi, network, smartphone). Our goal is to have you walk out of the tutorial with your own functional PiDoorbell to use when you get back home and enough information so you can continue to build on it. Participants should bring their own Raspberry Pi, SD card (Wheezy Raspbian installed, if possible) and power supply, and optionally a PiCam or other USB camera.  We will provide attendees the remaining materials required for this tutorial.	Rupa Dachere,Akkana Peck	Embedded Systems	"Rupa and Akkana will walk you through the setup/code to build your own super-cool PiDoorbell project to monitor/notify you about visitors at your house.

Learn about the RaspberryPi, PiDoorbell software/hardware and build your own PiDoorbell to take home with you!

Bring a RaspberryPi, power cord, USB cable (USB camera optional). We will provide the rest of the hardware (wifi, prox. sensor etc.)."	Intermediate	Build your own PiDoorbell ! - Learn Home Automation with Python	Wednesday	2014-04-09 13:20:00	2014-04-09 16:40:00
This workshop teaches you fundamental data mining techniques as applied to popular social websites by adapting example code from Mining the Social Web (2nd Edition, O'Reilly 2013) in a tutorial-style step-by-step manner that is designed specifically to accommodate attendees with very little programming or domain experience. This workshop's extensive use of IPython Notebook facilitates interactive learning with turn-key examples against a Vagrant-based virtual machine that takes care of installing all 3rd party dependencies that are needed. The barriers to entry are truly minimal, which allows maximal use of the time to be spent on interactive learning. The workshop is somewhat broadly designed and acclimates you to mining social data from Twitter, Facebook, LinkedIn, Google+, and GitHub APIs in five corresponding modules with the following memorable approach for each of them:  Aspire - Set out to answer a question or test a hypothesis as part of a data science experiment Acquire - Collect and store the data that you need to answer the question or test the hypothesis Analyze - Use fundamental data mining techniques to explore and exploit the data Summarize - Present analytical findings in a compact and meaningful way  Each module consists of a brief period in which each attendee will customize the corresponding notebook for the module with their own account credentials with the remainder of the module devoted to learning what data is available from the API and exercises demonstrating analysis of the dataâall from a pre-populated IPython Notebook. Time will be set aside at the end of each module for attendees to hack on the code, discuss examples, and ask any lingering questions.	Matthew Russell	Other	Social websites such as Twitter, Facebook, LinkedIn, Google+, and GitHub have vast amounts of valuable insights lurking just beneath the surface, and this workshop minimizes the barriers to exploring and mining this valuable data by presenting turn-key examples from the thoroughly revised 2nd Edition of Mining the Social Web.	Novice	Mining Social Web APIs with IPython Notebook	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
Machine learning is the branch of computer science concerned with the development of algorithms to which can learn from previously-seen data in order to make predictions about future data.  It has become an important aspect of work in a variety of applications: from optimization of web searches, to financial forecasts, to studies of the nature of the Universe. This tutorial will provide a hands-on introduction to the central concepts of machine learning and the scikit-learn package.  Beginning from the broad categories of supervised and unsupervised learning problems, we will dive into the fundamental areas of classification, regression, clustering, and dimensionality reduction.  In each section, we will introduce aspects of the Scikit-learn API and explore practical examples of some of the most popular and useful methods from the machine learning literature. The strength of scikit-learn lies in its clean, uniform, and well-documented interface to efficient implementations of a large number of the most important machine learning algorithms.  By the end of this tutorial, participants will have a basic practical background in machine learning and the use of scikit-learn, and will be well poised to apply these tools in many areas, whether for work, for research, for Kaggle-style competitions, or for their own pet projects.	Jake Vanderplas,Olivier Grisel	Science	This tutorial will offer an introduction to the core concepts of machine learning, and how they can be easily applied in Python using Scikit-learn. We will use the scikit-learn API to introduce and explore the basic categories of machine learning problems, related topics such as feature selection and model validation, and the application of these tools to real-world data sets.	Intermediate	Exploring Machine Learning with Scikit-learn	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
Python is very well-suited for processing and managing geographic  data. In this talk, I'll show you why I think they are going to be  best friends forever.  First, I'll give an introduction to some of the best Python libraries  to use with your geodata, Fiona and Shapely. These libraries help you  convert geographic data between various formats and perform complex  geoprocessing tasks in just a few lines of code.  I'll also show you why treating the very popular GeoJSON format like a  Python dictionary can make it almost trivially easy to clean up and  validate your data before you put it into use. Writing scripts to take  care of these tasks can be quick and easy, helping you integrate  dataset updates into your systems efficiently and consistently, as  well as saving you from the headache of accidentally putting bad data  into your production application.  Finally, I'll discuss some examples of how you can use Python to add  custom functionality to standard GIS software packages like ArcGIS and  QGIS, and provide a number of additional resources to help get you  started.	Mele Sax-Barnett	Other	Python is so well-suited for processing and managing geographic data, I think they'll be best friends forever. In this talk, I'll introduce some of the best Python libraries to use with your geodata, and show you how treating GeoJSON like a Python dictionary can make cleaning and validating your data a breeze. I'll also discuss examples of using Python to add custom functionality to GIS software.	Novice	Python + Geographic Data = BFFs	Friday	2014-04-11 17:10:00	2014-04-11 17:40:00
The aim is to cover the basics of setting up a simple Django site, but using full, rigorous TDD at every step along the way.  In past conferences I've covered the same steps as the official Django tutorial.  This tutorial is new and updated, but covers similar topics, using the same structure that I'm using for my book, which is available for free for anyone looking to follow up on what the learn.  We'll learn how to set up functional tests with Selenium, how to set up Django, how to run Django unit tests, how TDD actually works in practice, the unit test / code cycle where we re-run the tests after each tiny, incremental change to the code, as well as all the basics of Django.  We'll talk about what to test, what not to test, what the point of all this testing is anyway, and I promise to make it all at least moderately entertaining. Plus it's all in Python 3! Pre-requisites! It is absolutely vital that you come with the required software pre-installed on your PC.  It's not fair on everyone else to be sitting there while we wait for you to download stuff from PyPI over the conference network.  So, make sure you have the following installed on your PC:  Python 3.3 Git Firefox Selenium Django  Have a look at the preface section in my book for detailed installation instructions, and just email me if you need help.	Harry Percival	Best Practices & Patterns	Learn Test-Driven-Development and Django by building a simple web application from scratch.  We'll cover unit testing, Django models, views and templates, as well as using Selenium to open up a real web browser for functional tests. This talk is intended for audiences new to TDD, new to Django, and even new to Python! You'll need Python 3, Git, Firefox, Selenium and Django installed on your PC.	Novice	TDD for web applications, from scratch	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
Last year at Hearsay Social, we went through the drill of internationalizing our codebase to support customers across the globe. We used the Python gettext framework and Babel package for translation message file generation. As we continuously deployed new features, we realized that it was hard to maintain our translations at an acceptable quality bar (particularly as an enterprise product) without constant developer intervention. We often found that we were missing translations due to latency and integrating syntax errors in message files provided by the translation service. Also, as developers edited various strings in our codebase, we lost translations for them. We had to create switches in our code to ensure that new features that did not have translations available were not turned on for international customers. Code complexity galore. Weâre avid users of Github and use pull requests to integrate code into production. We used githooks to trigger translation checks (Polib and Potpie) on pull requests. We also used our existing continuous test infrastructure (Jenkins) to automate integrations with our translation service. We discovered some nifty switches in the Babel translation package for generation of translation files and revisited how strings in our code were arranged to enable quick deployment with full translation coverage for our international customers.	Ruchi Varshney	Best Practices & Patterns	Is your web app ready for a global audience? Internationalizing your codebase with gettext (bit.ly/pyconi18n) might just be the simpler part of the puzzle. Itâs hard to maintain translations in a fast paced deployment environment without constant manual intervention. This talk covers tools and strategies you can adopt to automate your localization process and ensure high translation coverage.	Intermediate	Localization Revisited	Sunday	2014-04-13 14:30:00	2014-04-13 15:00:00
"Python's debugger, PDB, is a powerful built-in tool, but its interface is less than inviting. Many programmers I've worked with use it simply, if at all: setting a break point, and then inspecting the local state, occassionally stepping a few lines in, before continuing or killing the program. PDB can do so much more. PDB allows programmers to set breakpoints on the fly, re-run programs on exit to continue debugging, and inspect and modify execution flow. And that's just for starters. By leveraging PDB's features you can fire breakpoints conditionally, display useful information when they fire, even construct simple ""watches"" on variables. PDB is included in the standard library, which means that there are additional tools that extend if further, providing ways to debug web applications and debug over a network connection. This talk will provide novice Python programmers with a basic understanding of the Python debugger. Intermediate programmers who know about PDB will come away with knowledge of how they can better leverage it when working with their programs."	Nathan Yergler	Python Core (language, stdlib, etc.)	"Python includes a powerful debugger, but using it well requires practice. Setting a break point and inspecting local variables is easy, but what else can you do? What if you need to set the breakpoint
in one of your dependencies, or only fire it conditionally? How do you navigate calls, or change them? Join me for an in depth look at how you can better use PDB to debug and understand programs."	Intermediate	In Depth PDB	Saturday	2014-04-12 15:15:00	2014-04-12 16:00:00
Big-O notation, data structures and algorithms. These are scary topics for many self-taught programmers, but don't need to be. The underlying concepts are relatively straight forward. The main difficulty is having an opportunity for someone to explain them to you. It's also especially helpful if that person is a self-taught programmer who understands that not everyone has a deep understanding of math theory. Here is your excuse to finally take the time to learn these important, fundamental concepts.	Justin Abrahms	Other	"When people talk about Big O notation do you go cross eyed? Do you not
get the point of learning about implementing linked lists or depth
first search? Join me as I introduce the CS fundamentals that helped
me ace my Google interview, even though I didn't get a formal CS
education."	Novice	Computer science fundamentals for self-taught programmers	Friday	2014-04-11 10:50:00	2014-04-11 11:20:00
RGB LEDs are not so much a new technology, but they are becoming increasingly available and affordable. Many people use a simple blinking single-color LED as their first arduino project, because making things change in the physical world in response to code is just so darn satisfying.  To get an effective animation on a strip that contains 50 lights involves sending 150 (R + G + B x 50) values at 30 frames per second, larger projects might contain thousands of these lights. Getting really interesting effects and patterns out of full color LEDs requires a degree of abstraction in the code that sends these values to the hardware. How should the design of a library intended as a creative tool be approached? Three threads of this story will be woven together in this talk: 1) What are the hardware limits and considerations of the current LED technology  voltage requirements line losses whole strip control, vs individual node/pixel control integrated ICs and dedicated controllers suppliers and sources  2) Design considerations of a library with creativity and interaction as principal design guidelines, with BirdFish used as an illustrating example  analogy: the choreographer doesn't care about the muscle fibers of the dancers hard real time vs soft real time, OS kernel limitations the perception of animations, and adaptive framerate Using envelopes and easing functions as design components for non-linear organic motions Defining a vocabulary of input types, from simple events to gestures Be agnostic about inputs and outputs  Many parallels exist between creative lighting control presented here and old-school hardware based music synthesizer design. Both involve the real-time generation of perceptually experienced output in response to both trigger (on/off) events, and modifications mid-output (think whammy bar vibrato). In both cases, there is a need for understanding some nitty gritty technical hardware details, but then abstracting these into an API or interaction set that is intuitive and supportive of user's end goals.	Preston Holmes	Other	Blinking colored lights bring out the child in all of us. Color LED lighting technology is becoming more available and affordable. Layers of hardware, lighting protocols, and effects design can make doing anything more complex than blinking these lights tricky. Come learn about LEDs how to control them with Python, and about building real-time control of physical things.	Intermediate	Blending art, technology, and light, Python for interactive and real time LED installations	Friday	2014-04-11 16:30:00	2014-04-11 17:00:00
The creation of binary executables has traditionally not been well-supported in the Python ecosystem, whether because the community gravitated towards supporting open-source software patterns where release of the source code is not an issue, or because Python applications were so often deployed as services that customers accessed remotely instead of installing on their own machines. But the future has now arrived: there are not one, but two competing solutions that will compile your Python to a real executable â that carries neither your raw Python code nor easily disassemblable .pyc files inside! The talk will explore the features of Nuitka, built from the ground up to compile Python, and Cython, which is able to do exactly the same thing as a side-effect of its main purpose: to interface Python and C/C++ for scientists and engineers. How do they differ in their features and in the resulting executable? What limits does each project place on the code that you can compile and distribute, and on the third-party libraries that you will be able to use? The talk will include a background on the difference between compilation and interpretation; a look at the features of source code versus byte code versus machine language; and the performance, unexpected error messages, and lessons learned from using both Nuitka and Cython to compile executables for distribution to real customers!	Brandon Rhodes	Best Practices & Patterns	It was once quite painful to build your Python app as a single .exe file. Support forums filled with lamentations as users struggled with primitive tools. But today, two separate tools exist for compiling your Python to real machine language! Come learn about how one of the biggest problems in commercial and enterprise software has now been solved and how you can benefit from this achievement.	Intermediate	The Day of the EXE Is Upon Us	Sunday	2014-04-13 14:30:00	2014-04-13 15:00:00
Every piece of software delivers a combination of supported behavior (âwhat must beâ) and incidental behavior (âwhat happens to beâ). Good software differentiates between the two. Great software uses every tool and technique available to describe the two and the difference between them to ease the work of clients, authors, and maintainers. The full behavior that a software module provides can be associated with a single exact point in the space of all possible behaviors. The behavior that that module guarantees is, for software modules of any significant size or complexity, specified less than completely, and thus can be associated with a continuum of points in the space of all possible software behaviors. We define a software moduleâs behavioral envelope as this continuum of allowed behaviors. Acknowledging the role that documentation and type systems play in shaping and describing a moduleâs behavioral envelope, we focus the bulk of our talk on how software testing isnât today being used to reason about behavioral envelopes, how it could be, and why it should be. Testing code for algorithmic correctness is a great start on the path to stable, maintainable software, but itâs only a part of the battle. We introduce the idea of defining a behavioral envelope for your software via machine-executable tests. Such tests inform good API design and sustainable test architectures. Your tests become a critic of your design, and if you delay tests it can be the smell of technical debt creeping into your codebase. We conclude by expanding our ideas to rethink the craft of software engineering itself not as assembling simpler behaviors into more complex behaviors but rather joining simpler envelopes of guaranteed behavior into more complex and more powerful envelopes of supported behavior.	Augie Fackler,Nathaniel Manista	Best Practices & Patterns	Guaranteed behavior makes software modules useful. Software guarantees are commonly incomplete with good reason: promises that are narrow and few are most easily kept across wide ranges of platforms and long times. We define the space of a moduleâs allowed behavior to be its âbehavioral envelopeâ and show that thinking and speaking in terms of envelopes eases maintenance and makes APIs delightful.	Intermediate	Deliver Your Software In An Envelope	Sunday	2014-04-13 13:10:00	2014-04-13 13:40:00
In recent years the Representational State Transfer (REST) architecture has emerged as the predominant design style for web based services. In this session you will learn about RESTful web services and how they can be implemented using the Flask microframework. Why REST? Because REST is simple and lightweight. And because the most popular implementation of the REST design is no other than HTTP, the protocol that powers the World Wide Web. Clients and servers of RESTful web services implemented on top of HTTP can take advantage of the huge existing infrastructure that powers the web. In this session you will see how easy it is to implement a web service on a general purpose web framework. Why Flask? Flask is a small, easy to use, yet fully featured open source web microframework written in Python. Its code is concise and well written, you can read it all and understand it. As you will see in the demonstration part of the session, the straightforward way in which responses to web requests are written in Flask enables developers to create easy to maintain implementations of RESTful web services.	Miguel Grinberg	Web Frameworks	"Flask is a web framework for Python based on Werkzeug, Jinja 2 and good intentions. It is considered a micro-framework, but don't get the ""micro"" part fool you; Flask can do everything the ""others"" can do, many times in a simpler, leaner way.  This session will introduce you to Flask as an engine to build RESTful web services."	Novice	Writing RESTful web services with Flask	Saturday	2014-04-12 13:40:00	2014-04-12 14:25:00
"Memcached is a distributed, in-RAM key/object store which does O(1) everything. I will first describe the memcached basics: what a typical memcached API looks like, how memcached behaves as a distributed system, how to name your keys smartly, and what memcached can't do for you. I then detail some memcached internals that are essential to know to use it properly: how memcached divides its memory in pages and slab classes, how it decides what data to evict when its memory is full, and how the memcached LRU cache behaves. Finally, we get our hands really dirty with concrete Python examples of using memcached in the wild: how to use memcached to speed up an object's JSON serialization, how we can cache large objects in memcached with either a paginated cache or a 2-phase fetch approach, what is a ""thundering herd"" and how to prevent it, and how we can write smart decorators to minimize code rewrite and avoid cache misses."	Guillaume Ardaud	Best Practices & Patterns	Memcached is a popular, blazing fast in-RAM key/object store mainly used in web applications (although it can be used in virtually any software). You will walk out of this talk with a solid understanding of memcached and what it does under the hood, and become familiar with several patterns and best practices for making the most of it in your own Python applications.	Intermediate	Cache me if you can: memcached, caching patterns and best practices	Friday	2014-04-11 11:30:00	2014-04-11 12:00:00
This talk is an introductory overview of Brython: a brand-new browser-based implementation of Python that compiles to JavaScript as the page is loaded. Why Client-side Python? Explain potential use cases of Python on the client side. Many attempts have been made to compile Python to Javascript; most are experimental.  Intro to Brython Discuss current features of Brython and how they're implemented from a source code perspective.   Case Study Demo a widget made in Javascript and that same widget made in Brython in terms of performance and ease of implementation. Limitations and What's Next Discuss what's missing in Brython and what potential new features should be added to Brython. What is The Future of Client-Side Python? Why does Client-side Python have a long way to go? Both technical and non-technical issues prevent client-side Python from becoming more widely adopted. Discuss difficulties in getting client-side Python adopted as a mainstream tool.	Susan Tan	Other	Have you ever wished that you can write Python in the browser? Brython is an experimental Javascript library that enables you to leverage the elegance of Python on the client side. Novice programmers who are familiar with Javascript will learn about Brython, how Brython measures up against Javascript, and why getting client-side Python adopted as a mainstream tool is really difficult.	Novice	Python in the Browser: Intro to Brython	Saturday	2014-04-12 11:30:00	2014-04-12 12:00:00
In this tutorial we will first learn how to solve, simulate, and visualize multibody dynamics problems with Python. These methods and techniques play an important role in the design of robots, vehicles, spacecraft, manufacturing machines, etc. In particular, we will highlight the derivation of realistic models of motion with SymPy Mechanics. We will walk through the derivation of the equations of motion of a multibody system (i.e. the model or the plant), simulating and visualizing the free motion of the system, and finally we will add simple feedback controllers to control the plants that we derive. We will start with some simple college level physics problems such as the pendulum and mass spring damper and close with a more complex three dimensional problem, such as the control of a robotic arm. It is best if the attendees have some background with calculus-based college level physics. They should also be familiar with the SciPy Stack, in particular IPython, SymPy, and SciPy. Our goal is that attendees will come away with the ability to model basic multibody systems, simulate and visualize the motion, and apply simple feedback controllers all in a Python framework. Attendees will be expected to have fully read the README and installed all software  before coming to the tutorial. More information can be found in the following repository:  https://github.com/pydy/pydy-tutorial-pycon-2014	Jason Moore,Tarun Gaba	Science	In this tutorial we will first learn how to solve, simulate, and visualize multibody dynamics problems with Python. These methods and techniques play an important role in the design of robots, vehicles, spacecraft, manufacturing machines, etc.	Intermediate	Dynamics and Control with Python	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
This carefully constructed course will take a programmer with a basic understanding of Python to the next level. You should feel comforable with Python loops, variables, functions, and classes. From there we build your knowledge and cover some of the more exciting aspects of Python that tend to bite new Python programmers. With a unique, fast-paced combination of lecture and lab, the student will not only listen to the material, but try it out themselves. In addition, attendees will recieve a copy of the slides, a cheatsheet covering the material, and a copy of Treading on Python Volume 2. Bring a laptop with Python (2 or 3) installed and a desire to learn some more advanced features of Python.	matt harrison	Python Core (language, stdlib, etc.)	Are you new to Python and want to learn how to step it up to the next level? Have you wondered about functional programming, closures, decorators, context managers, generators, or list comprehensions and when you should use them and how to test them? This hands-on tutorial will cover these intermediate subjects in detail, by explaining the theory behind them then walking through examples.	Intermediate	Hands-on Intermediate Python	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
Automated testing by developers has been de rigeur for more than a decade now -- or has it? Unfortunately, there are still too many organizations and too many developers that do not use automated testing in a rigorous, disciplined way. It's no surprise that writing tests makes your code more correct. I'm going to focus in particular on the lowest level of automated testing, unit testing, with the aim of explaining one of its unexected benefits: unit testing improves the design of your code. Cleaner code isn't just an intellectual exercise: it's code that is easier to understand, easier to modify, easier to extend, and easier to reuse. Regular use of unit tests will not merely help you to write more correct code; it will make you a better programmer.	Greg Ward	Best Practices & Patterns	Unit testing is like public transit: everyone agrees it's a good thing for other people to do. It's easier to swallow when you see how unit testing improves not only the correctness of your code, but the design as well. I'll walk through a real-life case study where adding unit tests turned a pretty good module into an even better one: easier to understand, extend, and reuse.	Novice	Unit Testing Makes Your Code Better	Saturday	2014-04-12 14:35:00	2014-04-12 15:05:00
There's a gaping hole in Python advocacy: K-12 educators. Teachers are the front-lines of computer science and programming education, especially in countries where attending primary and secondary school is compulsory. Worldwide, resources to teach computer science are stretched very thin. Learn what we have to offer CS teachers and how you can help in your local area. I'll cover what it takes to find and offer a useful service to a teacher (not very much!), and the kinds of issues teachers face in the classroom. Also, you'll learn about the technologies teachers are most interested in and how you can help provide resources that a teacher can use in their classroom. Also learn about how software companies typically court school districts and educators. We're ceding too much ground to deep-pocketed proprietary software and hardware companies whose goals are largely to sell software and hardware through long-term government contracts and workforce training. Our communities should engage directly with teachers to explain what it is that we do, and how it is important and different than proprietary  development. Our goal as advocates should be universal computer and programming literacy. This is basic understanding of what a computer is, what algorithms are, what code is and how computers use them. Any child can learn these things, but these concepts are still rarely taught. Free and open source software enables literacy in a fundamental way. Anyone who believes in freedom on the web, personal liberty and democracy should be concerned about proprietary software companies dominance in the production of CS curriculum and their influence on teachers. Teachers want to use free and open source software. Let's make it easier for them to do it.	Selena Deckelmann	Education	There's a gaping hole in Python advocacy: K-12 educators. These are the front-lines of CS education, especially in countries where attending primary and secondary school is compulsory, and resources to teach CS are stretched very thin. Learn what we have to offer CS teachers and how you can help in your local area.	Novice	The Python Pipeline: Why you should reach out to local teachers and how to do it	Friday	2014-04-11 14:35:00	2014-04-11 15:05:00
At 2013's PyCon, the kids stole the show.  The Young Coder's workshop, comprised of two 1-day workshops, helped dozens of young and aspiring programmers explore Python for the first time.  The teaching materials we used were the same on both days - the same open-ended curriculum worked with varying degrees of success for kids from 10 to 16 years old.  The students worked on Raspberry Pis (which they were allowed to keep after the class). We also sent them home with books so that they could continue learning the way so many programmers do: hacking on their own. Since then, Young Coder classes have sprung up at regional and national Python conferences, organized by local user groups around the country, and some put on by individuals who want to see kids in their communities take their first steps in programming. These classes don't quite come together on their own, but with a little bit of effort anyone can do it.  This talk aims to go into detail about how to wrangle the supplies and people you'll need to get it done, along with all the little details that will ensure a class goes smoothly.  We'll also talk about the most important part of any class - teaching the kids!  You'll learn a few strategies for keeping kids engaged and sparking their imaginations so that they get excited about learning more.	Barbara Shaurette,Katie Cunningham	Education	Since PyCon 2013, interest in the Young Coders class has intensified. Several Python conferences have run their own, and classes outside of conferences - from one-time workshops to after school clubs - have sprung up as well.  With more people than ever interested in teaching Python to kids, we're here to address how to organize a class. It takes some effort to set up, but the payoff is enormous.	Novice	The Young Coder: Let's Learn Python (or, 'So, You Want to Run a Young Coders Class')	Friday	2014-04-11 13:40:00	2014-04-11 14:25:00
Performance testing and profiling is equal parts art and science. This talk will explore both sides of the virtuous cycle, and offer specific tips to make the most of continuous performance improvement, while helping you to avoid common pitfalls. Specifically, we will cover:  The various types of performance tests How to set up a performance testing environment, free of external influences How to make use of the standard library profile modules When you might want to look beyond the standard library How instrumentation can tie these two key techniques together 	Dan Crosta	Testing	"Donald Knuth famously said that we should avoid optimization 97% of the time and focus on the ""critical 3%"". How can we identify that 3%? How can we best focus our optimization efforts, and avoid the ""root of all evil"" that is premature optimization? This talk introduces key types of performance testing, and demonstrates how they can be paired with profiling techniques in a cycle of improvement."	Intermediate	Performance Testing and Profiling: A Virtuous Cycle	Saturday	2014-04-12 17:10:00	2014-04-12 17:40:00
When onboarding a few new team members (all with Rails backgrounds) onto our well-established Django project, a few questions kept coming up:   How do I change the value of this variable I'm passing down to the template? Why does this particular method get called when a user visits a particular URL? How does a request get from the server into the Django process? I haven't set this variable, and yet it's showing up fine in my template - why?  After helping out answering these, it became evident that what I thought was a cleanly and obviously laid-out framework with a clear path in an out...wasn't, at least to people new to the project. With that in mind, this talk will address a few fundamental components in the pathway on which a request turns into a response. Specifically, it will discuss:  A brief history of WSGI - how we ended up with that as a standard, and what problems it's solving (and opportunities it's opening up) for us as a language. The role of middleware as a cross-cutting plugin system that hooks into the request/response cycle, but without a context. Unlike most other things, why it get runs (in different ways) on both the request- and response-sides, and what this makes it easy to do. URL dispatching from the prespective of someone who's never used routes before, and how it makes sense to separate the external and internal representations of a resource. What precisely it is that makes up a view function, and how we can have two structures - class-based views and function-based views - which look totally differernt, but work out being the same effective thing. Context processors, and their role as the middleware of templates.  In the process of that discussion, this talk will weave together all these concepts into a streamlined walk though Django's request system, and how a GET from your browser ends up returning meaningful content.	Dan Langer	Web Frameworks	"A simple ""Hello World!"" page, served via Django, passes though a surprising number of layers & components. For a newcomer to the language or the platform, this can be overwhelming at the start. Here I'll take you on a drive through Django's request-response cycle, focusing on using its layered model to understand what's going on and get things done."	Novice	A Scenic Drive through the Django Request-Response Cycle	Saturday	2014-04-12 10:50:00	2014-04-12 11:20:00
When many people hear of matplotlib, they think rudimentary graphs that will need to be touched up in photoshop. This tutorial aims to correct that notion by showing attendees how to generate polished data visualizations by teaching them how to exploit the functionality provided by various matplotlib libraries, such as color, ticker, cm, axes, and basemap/cartopy and modify the visualizations provided by pandas.  Using various standard exploratory data analytics graphs as examples, this tutorial will teach the user how to work with the various components that go into a matplotlib figure. The matplotlib object model will be described in detail, including a discussion on subplots, layouts, and figures. Next comes a discussion on manipulating markers, lines, and color, creating custom colormaps, and customizing labels and ticks in all sorts of ways, including changing the size, font, color,  and placement. The talk will wrap up with an introduction to plotting simple GIS data, such as points and polygons and how to customize Pandas  visualizations. 	Hannah Aizenman	Python Libraries	When people hear of matplotlib, they think rudimentary graphs that will need to be touched up in photoshop. This tutorial aims to teach attendees how to exploit the functionality provided by various matplotlib libraries to create professional looking data visualizations.	Intermediate	Beyond Defaults:  Creating Polished Visualizations Using Matplotlib	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
"Over the past 8 years of programing Python professionally, I've used a bunch of concurrent/parallel APIs. I've written at least three concurrent APIs myself and influenced a few others. By far the most important part of these APIs is fan-out and fan-in. But these crucial components are not very much appreciated. Most people don't even realize they're there. The goal of this talk is to make you care about fan-out and fan-in, and see how the future of Python is bright in this regard. I'll explain what fan-out and fan-in are, and why they're useful. I'll go over a bunch of examples of fan-out and fan-in, including data constructs (ORMs like SQLAlchemy, Map Reduce, real-time aggregation), mutiple threads (subprocesses, queues, and multiprocessing), and ""futuristic"" asynchronous APIs (App Engine NDB, Tulip/PEP3156). Attendees will learn the value of fan-in and fan-out in API design. They'll have a name to give something they've used many times in their concurrent programs without realizing what the magical mechanisms are called. They'll get excited about the future of Python because Tulip/PEP3156 is such a great API for concurrency."	Brett Slatkin	Best Practices & Patterns	The most important yet underappreciated parts of concurrent APIs are good constructs for fan-out (one thread spawns others) and fan-in (many threads join together). This talk will show examples of fan-in and fan-out. It will cover the successes and shortcomings of APIs that provide concurrency. Finally, we'll discuss how the async model of Tulip/PEP3156 is the ultimate API. The future is bright!	Intermediate	Fan-in and Fan-out: The crucial components of concurrency	Friday	2014-04-11 17:10:00	2014-04-11 17:40:00
Meet HostnameEndpoint - it takes a hostname, does a getaddrinfo lookup on it, picks the first IPv4 and IPv6 address out of the returned list, and then using a time-involving algorithm, tries connecting to both of them. It then gives you the connection that is established first, discarding the other one. All this sounds like it would take a lot of time, but hereâs the interesting part: it does not. In this talk, I aim to walk you through the development of HostnameEndpoint, right from the beginning till its successful merge to the Twisted codebase. Iâll begin by talking about the use of time-related functions in Twisted, and how one can write fast and predictable tests for them. Iâll also tell you how Twisted performs multiple network operations  âin parallelâ (no, not threads), and how thatâs what the reactorâs job is, essentially. As we progress, Iâll discuss the design decisions involved in the development of this endpoint and the important lessons on unit testing and test-driven development I learnt. Iâll then take you through the exciting journey of writing Twisted code, illustrate how the frightening Deferreds can be tamed to do your bidding, the ample number of times I found roadblocks and how I pushed them all away to put everything together and make it work. Finally, I'll show you how itâs still not perfect and could be improved further â largely by starting over with some parts of the code.	Ashwini Oruganti	Python Libraries	Did you know that when you resolve a hostname, you can get multiple addresses back, and pick any one to connect to? Some of these addresses will connect near instantly, while others might take a long time or time out. This talk is about a Twisted endpoint API I built that takes a hostname, and returns the connection that takes the least time to complete, from the list of resolved host addresses.	Intermediate	Kneel And Disconnect: Getting The Fastest Connection Out Of A Hostname	Friday	2014-04-11 11:30:00	2014-04-11 12:00:00
Both toy helicopters  and interfaces between a computer and electronics used to be prohibitively complicated and expensive. Now, for less than $50, you can have a toy helicopter and an Arduino delivered to your doorstep. In this talk, we'll cover the basics of how helicopters work, and talk about how our control system needs to take into account the physics of our cheap toy helicopter. We'll then talk about how to create an interface between our helicopter and a computer with an Arduino. This is when the power of Python comes to bear. We can use Python to develop systems to understand how control inputs affect the helicopter, and then build on top of these lower level tools to create higher-level applications that would have involved substantial effort in lower-level programming languages.	Ned Jackson Lovely	Embedded Systems	Using Python and a minimal amount of hardware hacking, it's possible to build computer controlled helicopters you can fly around your living room for surprisingly small amounts of money. This talk will describe the steps you'll need to take to start the ball rolling towards Skynet using a $20 helicopter and an Arduino.	Novice	Cheap Helicopters In My Living Room	Saturday	2014-04-12 16:30:00	2014-04-12 17:00:00
"This is a talk for people interested in the indie game development scene. It uses the commercially released gay-themed adventure game ""My Ex-Boyfriend the Space Tyrant!"" to give an insight into all phases of game development, from conception to implementation to launching to selling a game as a digital download for Windows, Mac and Linux. It provides an overview and basic tutorial for using pyvida (an open-sourced point-and-click adventure game engine  written in python). During this talk we'll:  Introduce ""My Ex-Boyfriend the Space Tyrant"" Outline design aims for indie developers Use pyvida to make a point-and-click adventure game Discuss commonly overlooked components of professional game design such as accessibility, websites, trailers and pushing updates Package for sale a game written in python Discuss the tools and services used for online distribution Handle the press, feedback from users and reviews  By the end of this talk you'll:  Have an introduction to pyvida Have an understanding that coding is just one part of making a successful game Have an insight into some of the challenges faced by developers from diverse backgrounds Have some ideas on how to make your games intriguing to players and the press Have knowledge of the tools and services many indie developers are using to sell their games online (such as steam, bmtmicro and humble store)  If you've ever wanted to make a game then this is the talk for you."	Luke Miller	Gaming	"Indie game developer Luke Miller presents a brief overview on making point-and-click adventure games using the open source pyvida gaming engine and uses his commercially released gay-themed adventure game ""My Ex-Boyfriend the Space Tyrant!"" as a tutorial on developing, packaging, releasing and selling a python game for Windows, Mac and Linux."	Intermediate	My big gay adventure. Making, releasing and selling an indie game made in python.	Sunday	2014-04-13 13:10:00	2014-04-13 13:40:00
Celery is a distributed task queue for Python. It is different from MapReduce because instead of applying a given mapper function on a large set of data and then aggregating (reducing) the results, in Celery you define small self contained tasks and then execute them in large number across a set of worker nodes. Each task can work on just a set of arguments which will maybe later form a part of a larger solution. Celery is written in Python and is very easy to use with minimal setup required for the workers or for the process creating these tasks that are executed on the workers.  For more in depth details on Celery you can visit www.celeryproject.com. For this workshop we will be looking at  - how to setup Celery, how to use it for simple cases and how we can do some complex workflows with Celery. The assumption is that you know Python, any level of expertise, and can understand a little bit about how and why we would like to distribute task execution - never the less we will start with a brief introduction of why we would like to distribute task execution. We will be looking at Celery, using Redis as broker, and we will be looking at a Celery monitoring tool called Flower. Celery can work with any backend for passing around the tasks and task results - which broker backend we use will ideally depend on the use case and the performance requirements that we have. However for the sake of this tutorial we will use Redis because it is very simple to setup and use.	Narahari Allamraju	Other	Celery is a distributed task queue for Python that is used by a large number of web applications to off load tasks that can be executed asynchronously. This workshop will demonstrate how we can use Celery for a use case that isn't a web site or a web application and is something which could happen in a hospital or a bank or any other such large organization.	Novice	Distributed task processing using Celery	Thursday	2014-04-10 13:20:00	2014-04-10 16:40:00
IPython started in 2001 simply as a better interactive Python shell. Over the last decade it has grown into a powerful set of interlocking tools that maximize developer productivity in Python while working interactively. Today, IPython consists of a kernel that executes the user code and provides many features for introspection and namespace manipulation, and tools to control this kernel either in-process or out-of-process thanks to a well-specified communications protocol implemented over ZeroMQ. This architecture allows the core features to be accessed via a variety of clients, each providing unique functionality tuned to a specific use case:   An interactive, terminal-based shell with capabilities beyond the default Python interactive interpreter (this is the classic application opened by the ipython command that most users are familiar with).   A graphical, Qt-based console that provides the look and feel of a terminal, but adds support for inline figures, graphical calltips, a persistent session that can survive crashes of the kernel process, and more. A user-based review of some of these features can be found here.   A web-based notebook that can execute code and also contain rich text and figures, mathematical equations and arbitrary HTML. This notebook presents a document-like view with cells where code is executed but that can be edited in-place, reordered, mixed with explanatory text and figures, etc. The notebook provides an interactive experience that combines live code and results with literate documentation and the rich media that modern browsers can display:     A high-performance, low-latency system for parallel computing that supports the control of a cluster of IPython engines communicating over ZeroMQ, with optimizations that minimize unnecessary copying of large objects (especially numpy arrays). These engines can be controlled interactively while developing and doing exploratory work, or can run in batch mode either on a local machine or in a large cluster/supercomputing environment via a batch scheduler.  In this hands-on, in-depth tutorial, we will briefly describe IPython's architecture and will then show how to use the above tools for a highly productive workflow in Python.	Fernando Perez	Python Libraries	"IPython provides tools for interactive and parallel computing that are widely used in scientific computing, but can benefit any Python developer.

We will show how to use IPython in different ways, as: an interactive shell, an embedded shell, a graphical console, a network-aware VM in GUIs, a web-based notebook with code, graphics and rich HTML, and a high-level framework for parallel computing."	Intermediate	IPython in depth: high productivity interactive and parallel python	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
This talk traces JavaScript's impact on software development tools over forty years, from 1995 until 2035. Although the language is mostly dead today, it drove the largest transformation of mainstream development tools since the creation of Unix 65 years ago. We'll examine some key moments in JavaScript's history: its accidental rise to popularity; asm.js, allowing arbitrary software to run at native speed in browsers; the language ecosystem that grew up around asm.js, displacing JavaScript itself; the replacement of traditional Unix terminals, shells, and editors with new, higher-level equivalents running against the DOM; and finally, the inversion of the browser-OS relationship, still ongoing. This story is told by someone who was a fervent JavaScript detractor during its rise. It was easy to see the language's numerous and glaring shortcomings, but miss the path that it laid out.	Gary Bernhardt	Other	This talk traces JavaScript's impact on software development tools over forty years, from 1995 until 2035. Although the language is mostly dead today, it drove the largest transformation of mainstream development tools since the creation of Unix 65 years ago.	Intermediate	The Birth & Death of JavaScript	Friday	2014-04-11 13:55:00	2014-04-11 14:25:00
In the last 18 months the Python packaging world has seen an explosion of activity. Some improvements like SSL certificate verification and pyvenv are already available, while others are just over the horizon. In this talk you will learn what the packaging community has been hard at work on and how you can take advantage of the latest tools and techniques in your Python environments.	Noah Kantrowitz	Python Core (language, stdlib, etc.)	In the last 18 months the Python packaging world has seen an explosion of activity. Learn what improvements are available now and what is on the horizon.	Intermediate	What is coming in Python packaging	Saturday	2014-04-12 17:10:00	2014-04-12 17:40:00
"The cloud provides great opportunities for a variety of important computational science challenges, including reproducible science, standardized computational workflows, comparative benchmarking, and focused optimization.  It can also help be a disruptive force for the betterment of science by eliminating the need for large infrastructure investments and supporting exploratory computational science on previously challenging scales.  However, most cloud computing use in science so far has focused on relatively mundane ""pleasantly parallel"" problems.  Our lab has spent many moons addressing a large, non-parallelizable ""big data/big graph"" problem -- sequence assembly -- with a mixture of Python and C++, some fun new data structures and algorithms, and a lot of cloud computing.  Most recently we have been working on open computational ""protocols"", worfklows, and pipelines for democritizing certain kinds of sequence analysis. As part of this work we are tackling issues of standardized test data sets to support comparative benchmarking, targeted optimization, reproducible science, and computational standardization in biology.  In this talk I'll discuss our efforts to understand where our computational bottlenecks are, what kinds of optimization and parallelization efforts make sense financially, and how the cloud is enabling us to be usefully disruptive.  As a bonus I'll talk about how the focus on pleasantly paralellizable tasks has warped everyone's brains and convinced them that engineering, not research, is really interesting."	Titus Brown	Science	"Cloud computing offers some great opportunities for science, but most
cloud computing platforms are I/O and memory limited, and hence
are poor matches for data-intensive computing.  After 4 years of
research software development we are now instrumenting and benchmarking
our analysis pipelines; numbers, lessons learned, and future plans
will be discussed. Everything is open source."	Intermediate	Data intensive biology in the cloud: instrumenting ALL the things	Saturday	2014-04-12 14:35:00	2014-04-12 15:05:00
"How do you create a psychology experiment which is engaging and enjoyable for participants, yet also well-controlled by scientific standards? In this talk, I will present several real experiments developed by myself and my colleague Peter Battaglia which immerse participants in a rich, 3D environment. Using Python, our experiments simulate a semi-realistic world and present a level of interactivity similar to that found in popular physics-based video games such as Angry Birds. To create such ""game-like"" experiments, we use the Panda3D video game engine. Panda3D exposes the ability to capture key presses, track the mouse, display text, simulate physics, and render 3D graphics, all with the level of precision required by a well-controlled experiment. Furthermore, because Panda3D uses Python, it integrates well with powerful tools such as NumPy and SciPy. The result is that code involved in running behavioral experiments can be reused for model simulations and data analysis. During this talk, audience members will be able to collectively participate in demos of our experiments. After each demo, I will walk through the steps that were necessary to create the experiment, emphasizing both where there are differences between implementing an interactive experiment versus an actual video game, and how the experiments fit within a larger theme of Python in science."	Jessica Hamrick,Peter Battaglia	Science	"Have you ever wanted to play video games while also contributing to science? In psychology experiments developed by myself and Peter Battaglia, participants are immersed in an interactive 3D world which is experimentally well-controlled, yet also extremely fun. This talk will explain how we created these ""game-like"" experiments in Python using the Panda3D video game engine."	Intermediate	Games for Science: Creating interactive psychology experiments in Python with Panda3D	Saturday	2014-04-12 10:50:00	2014-04-12 11:20:00
A recommendation engine is a software system that analyzes large amounts of transactional data and distills personal profiles to present its users with relevant products/information/content. We see them in a wide variety of domains and applications and they help us navigate the overwhelming choice that we face everyday. This tutorial will formally introduce the concepts and definitions of the recommendation systems literature and will quickly move on to an iterative process for building a minimal reco engine. In the process, we'll learn about the building blocks for scientific computing in Python: NumPy and (more recently) pandas.	Diego Maniloff,Christian Fricke,Zach Howard	Science	In this tutorial we'll set ourselves the goal of building a minimal recommendation engine, and in the process learn about Python's excellent Pydata and related projects and tools: NumPy, pandas, and the IPython Notebook.	Intermediate	Hands-on with Pydata: how to build a minimal recommendation engine.	Thursday	2014-04-10 09:00:00	2014-04-10 12:20:00
"Working with developers on schema migrations is a perennial challenge for DBAs and developers. Devs tend to like a ""set it and forget it"" tool. Very few of those tools work well with distributed teams, continuous integration or situations which require raw SQL. This talk discusses the strategies used to move from a pure SQL and shell migration system to using SQLAlchemy and alembic for maximum DBA and developer happiness. I'll share tips for DBAs and developers in bringing schema elements into the mainstream revision control system, and making it reasonable and easy to get code review on stored procedures from the entire team. Whether you're a Python shop looking for a better migration tool, or a DBA looking to integrate better with your developer team, you'll get useful insight into the key features your next schema migration system should support. Our database environment is a 2+TB PostgreSQL cluster running 9.2. We have a rapidly evolving schema and reporting system, and over 150 user defined functions in plpgsql. We also support custom types, DOMAINs and data types not supported yet by SQLAlchemy. Migrating from pure SQL to Python models was the first challenge. Creating a reasonable system for managing the UDFs was the second. The final challenge has been training developers to create and manage their own migrations (called ""revisions"" in alembic)."	Selena Deckelmann	Databases	"Working with developers on schema migrations is a perennial challenge for DBAs and developers. Devs tend to like a ""set it and forget it"" tool. This talk discusses the strategies used to move from a pure SQL and shell migration system to using SQLAlchemy and alembic for maximum DBA and developer happiness."	Intermediate	Sane schema migrations with Alembic and SQLAlchemy	Saturday	2014-04-12 14:35:00	2014-04-12 15:05:00
Designing APIs is one of the hardest tasks in programming. Besides solving your immediate problem, you also must accomodate unknown future onesâand fit nicely into other people's brains while you're at it. Can we codify this practice to steer us clear of the worst mires? I think we can. Let's examine some API successes and bloopers, factoring up the good patterns to yield a discussion of...  Extraction over invention Brevity Consistency Composability Simple data Grooviness Safety  ...spiced with flavors from anthroplogy, psychology, and history. Armed with a pre-flight checklist of common API foibles, you'll be able to avoid many common mistakes and craft elegant APIs which make for short, understandable code; few errors; and happy programmers.	Erik Rose	Best Practices & Patterns	The language you speak determines the thoughts you can think. Thus, API designers (and that includes you, if you've ever coined a function) have a great duty, as language inventors, to expand the mental canvases of those who come after. We'll concretize that into 7 hallmarks of good APIs, pulling examples (and bloopers) from popular Python libraries.	Intermediate	Designing Poetic APIs	Saturday	2014-04-12 12:10:00	2014-04-12 12:55:00
Beginning programmers: welcome to PyCon! Jumpstart your Python and programming careers with this 3-hour interactive tutorial. By the end, you'll have hands-on exposure to many core programming concepts, be able to write useful Python programs, and have a roadmap for continuing to learn and practice programming in Python. This tutorial assumes no prior programming experience. We'll cover:  Python as a calculator Basic data types Interactive programs: input and output Making choices: booleans and flow control Lists and iteration Functions  We'll also practice writing Python scripts, see demos of cool Python applications, and take a quick tour of popular Python libraries. By the end of this tutorial, you'll have the background and context to learn a lot more as you go through the rest of PyCon. You'll also be in great shape to continue learning Python through longer-form resources and start working on your own Python projects.	Jessica McKellar	Python Core (language, stdlib, etc.)	Beginning programmers: welcome to PyCon! Jumpstart your Python and programming careers with this 3-hour interactive tutorial. By the end, you'll have hands-on exposure to many core programming concepts, be able to write useful Python programs, and have a roadmap for continuing to learn and practice programming in Python. This class assumes no prior programming experience.	Novice	A hands-on introduction to Python for beginning programmers	Wednesday	2014-04-09 09:00:00	2014-04-09 12:20:00
"I. Why Async? A. First, There Was Multithreading: Traditional web servers use a thread per connection to store state. B. Trends: Contemporary web applications trend towards using web sockets and service-oriented architectures, which require very high numbers of concurrent connections. C. Limitations of Multithreading: Per-thread overhead limits the number of connections possible. We need a more efficient way to store state. II. What Is Async? A. Single-threaded: Asynchronous frameworks support high concurrency, typically with a single thread. B. Event-driven: Async frameworks use non-blocking sockets, and register for notifications on them using EPoll, Kqueue, or similar. C. State: The techniques used to store stateâcoroutines, callbacks, Deferredsâare more memory-efficient than threads but unfamiliar to most programmers. III. How Does Async Work? A. Frameworks: There are a number of asynchronous frameworks available for Python. The most popular are Tornado and Twisted. This year Guido has led development on an async framework for Pythonâs standard library, codenamed Tulip. Tulip is included in the Python 3.4 standard library as ""asyncio."" B. Finally, Some Code: Look at a chat server written in the multithreaded style with Flask, versus an async server that uses Tulip. The multithreaded code implicitly stores its per-connection state in each threadâs stack, stack pointer, and program counter. In Tulip those concepts map to generators, references to generators, and generatorsâ instruction pointers. C. The Tulip Event Loop: A stroll through the code for Tulipâs event loop. Tulip uses non-blocking sockets and Epoll / Kqueue to perform concurrent operations in a single thread. D. The Worst Sin: Any synchronous code in an async app blocks the event loop and makes the application crawl. When you grasp why, youâre way ahead of most programmers using Python async frameworks. IV. When Should I Use It? A. Indications: High connection counts, server-side events pushed to clients, leisure to code against a more challenging API. B. Contraindications: Reliance on synchronous third-party libraries, relaxed performance requirements."	A. Jesse Jiryu Davis	Web Frameworks	Pythonâs asynchronous frameworks, like Tulip, Tornado, and Twisted, are increasingly important for writing high-performance web applications. Even if youâre an experienced web programmer, you may lack a rigorous understanding of how these frameworks work and when to use them. Letâs see how Tulip's event loop works, and learn how to efficiently handle very large numbers of concurrent connections.	Intermediate	What Is Async, How Does It Work, And When Should I Use It?	Friday	2014-04-11 15:15:00	2014-04-11 16:00:00
